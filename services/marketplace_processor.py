"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Ozon –∏ Wildberries"""
from datetime import timedelta

from telethon import TelegramClient

from database.db import Database
from models.marketplace import Marketplace
from services.embeddings import EmbeddingService
from services.gemini_client import GeminiClient
from utils.config import Config
from utils.logger import get_logger
from utils.timezone import now_msk

logger = get_logger(__name__)


class MarketplaceProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ (Ozon –∏ Wildberries)"""

    def __init__(self, config: Config):
        self.config = config
        self.db = Database(config.db_path)
        self._embedding_service: EmbeddingService | None = None
        self._gemini_client: GeminiClient | None = None
        self._embedding_model_name = config.get(
            "embeddings.model", "paraphrase-multilingual-MiniLM-L12-v2"
        )
        self._embedding_local_path = config.get("embeddings.local_path")
        self._embedding_allow_remote = config.get("embeddings.allow_remote_download", True)
        self._embedding_enable_fallback = config.get("embeddings.enable_fallback", True)
        self._gemini_model_name = config.get("gemini.model", "gemini-1.5-flash")

        self.global_exclude_keywords = [
            keyword.lower() for keyword in config.get("filters.exclude_keywords", []) if keyword
        ]

        raw_marketplaces = config.get("marketplaces", [])
        if isinstance(raw_marketplaces, dict):
            raw_marketplaces = [
                {
                    "name": name,
                    **(raw_marketplaces[name] or {}),
                }
                for name in raw_marketplaces
            ]

        self.marketplaces: dict[str, Marketplace] = {}
        for mp_cfg in raw_marketplaces:
            if not isinstance(mp_cfg, dict):
                continue
            data = dict(mp_cfg)
            data.setdefault("enabled", True)
            try:
                marketplace = Marketplace(**data)
            except TypeError as exc:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ {mp_cfg}: {exc}")
                continue
            marketplace.combined_exclude_keywords_lower = list(
                dict.fromkeys(marketplace.exclude_keywords_lower + self.global_exclude_keywords)
            )
            self.marketplaces[marketplace.name] = marketplace

        if not self.marketplaces:
            logger.warning("–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞")

        self.all_exclude_keywords_lower = set(self.global_exclude_keywords)
        for marketplace in self.marketplaces.values():
            self.all_exclude_keywords_lower.update(marketplace.combined_exclude_keywords_lower)

        self.marketplace_names = list(self.marketplaces.keys())

        default_channel = next(
            (mp.target_channel for mp in self.marketplaces.values() if mp.target_channel),
            None,
        )

        self.all_digest_enabled = config.get("channels.all_digest.enabled", True)
        self.all_digest_channel = config.get(
            "channels.all_digest.target_channel",
            default_channel,
        )
        counts_config = config.get("channels.all_digest.category_counts", {})
        self.all_digest_counts = {
            "wildberries": counts_config.get("wildberries", 5),
            "ozon": counts_config.get("ozon", 5),
            "general": counts_config.get("general", 5),
        }

        self.duplicate_threshold = config.get("processor.duplicate_threshold", 0.85)
        self.moderation_enabled = config.get("moderation.enabled", True)

    @property
    def embeddings(self) -> EmbeddingService:
        if self._embedding_service is None:
            self._embedding_service = EmbeddingService(
                model_name=self._embedding_model_name,
                local_path=self._embedding_local_path,
                allow_remote_download=self._embedding_allow_remote,
                enable_fallback=self._embedding_enable_fallback,
            )
        return self._embedding_service

    @property
    def gemini(self) -> GeminiClient:
        if self._gemini_client is None:
            self._gemini_client = GeminiClient(
                api_key=self.config.gemini_api_key,
                model_name=self._gemini_model_name,
            )
        return self._gemini_client

    async def process_marketplace(self, marketplace: str, client: TelegramClient):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""

        if marketplace not in self.marketplaces:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace}")
            return

        mp_config = self.marketplaces.get(marketplace)
        if mp_config is None:
            logger.error(f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å {marketplace} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        if not mp_config.enabled:
            logger.info(f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å {marketplace} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return

        logger.info("=" * 80)
        logger.info(f"üõí –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–°–¢–ï–ô: {marketplace.upper()}")
        logger.info("=" * 80)

        # –®–ê–ì 1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        base_messages = self.db.get_unprocessed_messages(hours=24)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(base_messages)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        if not base_messages:
            logger.info(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {marketplace}")
            return

        filtered_messages = self._filter_by_keywords(
            base_messages, mp_config.keywords_lower, mp_config.combined_exclude_keywords_lower
        )
        logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        if not filtered_messages:
            logger.info(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ {marketplace} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return

        # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        unique_messages = await self.filter_duplicates(filtered_messages)
        logger.info(f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(unique_messages)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")

        if not unique_messages:
            logger.warning("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")
            return

        # –®–ê–ì 4: –û—Ç–±–æ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini (–û–î–ò–ù –ó–ê–ü–†–û–°!)
        formatted_posts = self.gemini.select_and_format_marketplace_news(
            unique_messages,
            marketplace=marketplace,
            top_n=mp_config.top_n,
            marketplace_display_name=mp_config.display_name or marketplace,
        )

        if not formatted_posts:
            for msg in unique_messages:
                self.db.mark_as_processed(msg["id"], rejection_reason="rejected_by_llm")
            logger.warning(f"Gemini –Ω–µ –æ—Ç–æ–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è {marketplace}")
            return

        logger.info(f"Gemini –æ—Ç–æ–±—Ä–∞–ª {len(formatted_posts)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {marketplace}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∫ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ–π
        formatted_posts = sorted(formatted_posts, key=lambda x: x.get("score", 0), reverse=True)

        formatted_ids = {post["source_message_id"] for post in formatted_posts}
        for msg in unique_messages:
            if msg["id"] not in formatted_ids:
                self.db.mark_as_processed(msg["id"], rejection_reason="rejected_by_llm")

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        for post in formatted_posts:
            self.db.mark_as_processed(post["source_message_id"], gemini_score=post.get("score"))

        # –®–ê–ì 5: –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if self.moderation_enabled:
            approved_posts = await self.moderate_posts(client, formatted_posts, marketplace)

            if not approved_posts:
                logger.warning("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
                return
        else:
            approved_posts = formatted_posts

        # –®–ê–ì 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        await self.publish_digest(
            client,
            approved_posts,
            marketplace,
            mp_config.target_channel,
            display_name=mp_config.display_name or marketplace,
        )

        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ {marketplace} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def _filter_by_keywords(
        self, messages: list[dict], keywords_lower: list[str], exclude_keywords_lower: list[str]
    ) -> list[dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        filtered = []

        for msg in messages:
            text_lower = msg["text"].lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
            if exclude_keywords_lower and any(
                exclude in text_lower for exclude in exclude_keywords_lower
            ):
                self.db.mark_as_processed(
                    msg["id"], rejection_reason="rejected_by_exclude_keywords"
                )
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
            if keywords_lower and not any(keyword in text_lower for keyword in keywords_lower):
                self.db.mark_as_processed(
                    msg["id"], rejection_reason="rejected_by_keywords_mismatch"
                )
                continue

            filtered.append(msg)

        return filtered

    async def filter_duplicates(self, messages: list[dict]) -> list[dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ embeddings"""
        unique = []

        for msg in messages:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding
            embedding = self.embeddings.encode(msg["text"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            is_duplicate = self.db.check_duplicate(embedding, self.duplicate_threshold)

            if is_duplicate:
                self.db.mark_as_processed(
                    msg["id"], is_duplicate=True, rejection_reason="is_duplicate"
                )
                continue

            unique.append(msg)

        return unique

    async def moderate_posts(
        self, client: TelegramClient, posts: list[dict], marketplace: str
    ) -> list[dict]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram"""

        logger.info(f"üìã –û—Ç–ø—Ä–∞–≤–∫–∞ {len(posts)} –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ({marketplace})")

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        for idx, post in enumerate(posts, 1):
            post["moderation_id"] = idx

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        message = self._format_moderation_message(posts, marketplace)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º my_personal_account –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        personal_account = self.config.my_personal_account
        await client.send_message(personal_account, message)

        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {personal_account}")

        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã (–∞–≤—Ç–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        return posts

    async def process_all_categories(self, client: TelegramClient):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å 3-–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π (5 WB + 5 Ozon + 5 –û–±—â–∏—Ö = 15)"""

        logger.info("=" * 80)
        logger.info("üì¶ –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–°–¢–ï–ô: –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò (3-–ö–ê–¢–ï–ì–û–†–ò–ô–ù–ê–Ø –°–ò–°–¢–ï–ú–ê)")
        logger.info("=" * 80)

        base_messages = self.db.get_unprocessed_messages(hours=24)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(base_messages)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        if not base_messages:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return

        # –®–ê–ì 2: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∏—Å–∫–ª—é—á–∞—é—â–∏–º —Å–ª–æ–≤–∞–º –∏ —Å—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ
        filtered_messages = []
        for msg in base_messages:
            text_lower = msg["text"].lower()
            if self.all_exclude_keywords_lower and any(
                exclude in text_lower for exclude in self.all_exclude_keywords_lower
            ):
                self.db.mark_as_processed(
                    msg["id"], rejection_reason="rejected_by_exclude_keywords"
                )
                continue
            filtered_messages.append(msg)

        logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        if not filtered_messages:
            logger.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
            return

        # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        unique_messages = await self.filter_duplicates(filtered_messages)
        logger.info(f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(unique_messages)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")

        if not unique_messages:
            logger.warning("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")
            return

        # –®–ê–ì 4: –û—Ç–±–æ—Ä –ø–æ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ Gemini (5+5+5=15 –Ω–æ–≤–æ—Å—Ç–µ–π)
        categories = self.gemini.select_three_categories(
            unique_messages,
            wb_count=self.all_digest_counts["wildberries"],
            ozon_count=self.all_digest_counts["ozon"],
            general_count=self.all_digest_counts["general"],
        )

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        wb_count = len(categories.get("wildberries", []))
        ozon_count = len(categories.get("ozon", []))
        general_count = len(categories.get("general", []))
        total_count = wb_count + ozon_count + general_count

        logger.info(
            f"Gemini –æ—Ç–æ–±—Ä–∞–ª: WB={wb_count}, Ozon={ozon_count}, –û–±—â–∏–µ={general_count}, –í—Å–µ–≥–æ={total_count}"
        )

        selected_ids = {
            post["source_message_id"]
            for posts in categories.values()
            for post in posts
            if post.get("source_message_id")
        }

        if total_count == 0:
            logger.warning("Gemini –Ω–µ –æ—Ç–æ–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
            for msg in unique_messages:
                self.db.mark_as_processed(msg["id"], rejection_reason="rejected_by_llm")
            return

        # –®–ê–ì 5: –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–≤—ã–±–æ—Ä 10 –∏–∑ 15)
        if self.moderation_enabled:
            approved_posts = await self.moderate_categories(client, categories)

            if not approved_posts:
                logger.warning("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
                for msg_id in selected_ids:
                    self.db.mark_as_processed(msg_id, rejection_reason="rejected_by_moderator")
                return
        else:
            # –ë–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - –±–µ—Ä–µ–º –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å
            approved_posts = (
                categories.get("wildberries", [])
                + categories.get("ozon", [])
                + categories.get("general", [])
            )

        approved_ids = {
            post.get("source_message_id")
            for post in approved_posts
            if post.get("source_message_id")
        }

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –æ—Ç–±–æ—Ä Gemini, –Ω–æ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∏—Ç–æ–≥–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        rejected_after_moderation = selected_ids - approved_ids
        for msg_id in rejected_after_moderation:
            self.db.mark_as_processed(msg_id, rejection_reason="rejected_by_moderator")

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ Gemini –Ω–µ –≤—ã–±—Ä–∞–ª –≤–æ–≤—Å–µ
        unique_ids = {msg["id"] for msg in unique_messages}
        not_selected_ids = unique_ids - selected_ids
        for msg_id in not_selected_ids:
            self.db.mark_as_processed(msg_id, rejection_reason="rejected_by_llm")

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        for post in approved_posts:
            self.db.mark_as_processed(post["source_message_id"], gemini_score=post.get("score"))

        # –®–ê–ì 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
        target_channel = (
            self.all_digest_channel
            if self.all_digest_enabled and self.all_digest_channel
            else next(
                (mp.target_channel for mp in self.marketplaces.values() if mp.target_channel),
                None,
            )
        )
        await self.publish_digest(
            client,
            approved_posts,
            "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã",
            target_channel,
            display_name="–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã",
        )

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    async def moderate_categories(
        self, client: TelegramClient, categories: dict[str, list[dict]]
    ) -> list[dict]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è: –≤—ã–±–æ—Ä 10 –∏–∑ 15 –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)"""

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        all_posts = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∫–∞–∂–¥–æ–º—É –ø–æ—Å—Ç—É
        for cat_name, posts in categories.items():
            for post in posts:
                post["category"] = cat_name
                all_posts.append(post)

        total = len(all_posts)
        logger.info(f"üìã –û—Ç–ø—Ä–∞–≤–∫–∞ {total} –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (–Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 10)")

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        for idx, post in enumerate(all_posts, 1):
            post["moderation_id"] = idx

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        message = self._format_categories_moderation_message(categories)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É
        personal_account = self.config.my_personal_account
        await client.send_message(personal_account, message)

        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {personal_account}")

        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–±–æ—Ä)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
        sorted_posts = sorted(all_posts, key=lambda x: x.get("score", 0), reverse=True)
        return sorted_posts[:10]

    def _format_categories_moderation_message(self, categories: dict[str, list[dict]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ 3-–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""

        number_emojis = {
            1: "1Ô∏è‚É£",
            2: "2Ô∏è‚É£",
            3: "3Ô∏è‚É£",
            4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£",
            6: "6Ô∏è‚É£",
            7: "7Ô∏è‚É£",
            8: "8Ô∏è‚É£",
            9: "9Ô∏è‚É£",
            10: "üîü",
            11: "1Ô∏è‚É£1Ô∏è‚É£",
            12: "1Ô∏è‚É£2Ô∏è‚É£",
            13: "1Ô∏è‚É£3Ô∏è‚É£",
            14: "1Ô∏è‚É£4Ô∏è‚É£",
            15: "1Ô∏è‚É£5Ô∏è‚É£",
        }

        lines = ["üìã **–ú–û–î–ï–†–ê–¶–ò–Ø: –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò**"]
        lines.append("_–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 10 –ª—É—á—à–∏—Ö –∏–∑ 15 –Ω–æ–≤–æ—Å—Ç–µ–π_\n")

        idx = 1

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è Wildberries
        if categories.get("wildberries"):
            lines.append("üì¶ **WILDBERRIES**\n")
            for post in categories["wildberries"]:
                emoji = number_emojis.get(idx, f"{idx}.")
                lines.append(f"{emoji} **{post['title']}**")
                lines.append(f"_{post['description'][:100]}..._")
                lines.append(f"‚≠ê {post.get('score', 0)}/10\n")
                idx += 1

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è Ozon
        if categories.get("ozon"):
            lines.append("üì¶ **OZON**\n")
            for post in categories["ozon"]:
                emoji = number_emojis.get(idx, f"{idx}.")
                lines.append(f"{emoji} **{post['title']}**")
                lines.append(f"_{post['description'][:100]}..._")
                lines.append(f"‚≠ê {post.get('score', 0)}/10\n")
                idx += 1

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –û–±—â–∏–µ
        if categories.get("general"):
            lines.append("üì¶ **–û–ë–©–ò–ï**\n")
            for post in categories["general"]:
                emoji = number_emojis.get(idx, f"{idx}.")
                lines.append(f"{emoji} **{post['title']}**")
                lines.append(f"_{post['description'][:100]}..._")
                lines.append(f"‚≠ê {post.get('score', 0)}/10\n")
                idx += 1

        lines.append("=" * 50)
        lines.append(f"üìä **–í—Å–µ–≥–æ:** {idx-1} –Ω–æ–≤–æ—Å—Ç–µ–π\n")
        lines.append("**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**")
        lines.append("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ –¥–ª—è **–ü–£–ë–õ–ò–ö–ê–¶–ò–ò** —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (10 —à—Ç—É–∫)")
        lines.append("–ù–∞–ø—Ä–∏–º–µ—Ä: `1 2 3 5 6 8 9 11 13 14`\n")
        lines.append("–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å `—Ç–æ–ø10` —á—Ç–æ–±—ã –≤–∑—è—Ç—å 10 –ª—É—á—à–∏—Ö –ø–æ –æ—Ü–µ–Ω–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        return "\n".join(lines)

    def _format_moderation_message(self, posts: list[dict], marketplace: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

        number_emojis = {
            1: "1Ô∏è‚É£",
            2: "2Ô∏è‚É£",
            3: "3Ô∏è‚É£",
            4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£",
            6: "6Ô∏è‚É£",
            7: "7Ô∏è‚É£",
            8: "8Ô∏è‚É£",
            9: "9Ô∏è‚É£",
            10: "üîü",
        }

        lines = [f"üìã **–ú–û–î–ï–†–ê–¶–ò–Ø: {marketplace.upper()}**"]
        lines.append("_(–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏)_\n")

        for post in posts:
            idx = post["moderation_id"]
            emoji = number_emojis.get(idx, f"{idx}Ô∏è‚É£")

            lines.append(f"{emoji} **{post['title']}**")
            lines.append(f"_{post['description'][:150]}..._")
            lines.append(f"‚≠ê –û—Ü–µ–Ω–∫–∞: {post.get('score', 0)}/10\n")

        lines.append("=" * 50)
        lines.append(f"üìä **–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {len(posts)}\n")
        lines.append("**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**")
        lines.append("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ –¥–ª—è –£–î–ê–õ–ï–ù–ò–Ø —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        lines.append("–ù–∞–ø—Ä–∏–º–µ—Ä: `1 3 5` - —É–¥–∞–ª–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ 1, 3 –∏ 5\n")
        lines.append("–û—Ç–ø—Ä–∞–≤—å `0` –∏–ª–∏ `–≤—Å–µ` —á—Ç–æ–±—ã –æ–¥–æ–±—Ä–∏—Ç—å –í–°–ï –Ω–æ–≤–æ—Å—Ç–∏")

        return "\n".join(lines)

    async def publish_digest(
        self,
        client: TelegramClient,
        posts: list[dict],
        marketplace: str,
        target_channel: str,
        display_name: str | None = None,
    ):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""

        logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è {len(posts)} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {target_channel}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        yesterday = now_msk() - timedelta(days=1)
        date_str = yesterday.strftime("%d-%m-%Y")
        header_name = display_name or marketplace

        lines = [f"üìå –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ {header_name} –∑–∞ {date_str}\n"]

        number_emojis = {
            1: "1Ô∏è‚É£",
            2: "2Ô∏è‚É£",
            3: "3Ô∏è‚É£",
            4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£",
            6: "6Ô∏è‚É£",
            7: "7Ô∏è‚É£",
            8: "8Ô∏è‚É£",
            9: "9Ô∏è‚É£",
            10: "üîü",
        }

        for idx, post in enumerate(posts, 1):
            emoji = number_emojis.get(idx, f"{idx}Ô∏è‚É£")
            lines.append(f"{emoji} **{post['title']}**\n")
            lines.append(f"{post['description']}\n")

            if post.get("source_link"):
                lines.append(f"{post['source_link']}\n")

        lines.append("_" * 36)
        lines.append(f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ {header_name}")
        lines.append(target_channel)

        digest = "\n".join(lines)

        # –ü—É–±–ª–∏–∫—É–µ–º
        await client.send_message(target_channel, digest)
        logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {target_channel}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º embeddings
        for post in posts:
            embedding = self.embeddings.encode(post["text"])
            self.db.save_published(
                text=post["text"],
                embedding=embedding,
                source_message_id=post["source_message_id"],
                source_channel_id=post["source_channel_id"],
            )

        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(posts)} embeddings –≤ –ë–î")

    async def run(self, use_categories=True):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤

        Args:
            use_categories: –ï—Å–ª–∏ True - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é 3-–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É (5+5+5=15, –≤—ã–±–æ—Ä 10)
                           –ï—Å–ª–∏ False - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É (–æ—Ç–¥–µ–ª—å–Ω–æ Ozon –∏ WB)
        """

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –¥–ª—è processor
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å listener –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        processor_session = self.config.get("telegram.session_name") + "_processor"
        client = TelegramClient(
            processor_session, self.config.telegram_api_id, self.config.telegram_api_hash
        )

        await client.start(phone=self.config.telegram_phone)

        try:
            if use_categories:
                # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (WB + Ozon + –û–±—â–∏–µ)
                await self.process_all_categories(client)
            else:
                # –°–¢–ê–†–ê–Ø –°–ò–°–¢–ï–ú–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –æ—Ç–¥–µ–ª—å–Ω–æ
                for marketplace in self.marketplace_names:
                    try:
                        await self.process_marketplace(marketplace, client)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {marketplace}: {e}", exc_info=True)
        finally:
            await client.disconnect()
            self.db.close()
