"""–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

import asyncio
from datetime import timedelta

import numpy as np
from telethon import TelegramClient

from database.db import Database
from models.category import Category
from services.embeddings import EmbeddingService
from services.gemini_client import GeminiClient
from utils.config import Config
from utils.logger import get_logger
from utils.telegram_helpers import safe_connect
from utils.timezone import now_msk

logger = get_logger(__name__)


class NewsProcessor:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    def __init__(self, config: Config):
        self.config = config
        self.db = Database(config.db_path, **config.database_settings())
        self._embedding_service: EmbeddingService | None = None
        self._gemini_client: GeminiClient | None = None

        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (CR-H1)
        self._cached_published_embeddings: list[tuple[int, any]] | None = None
        # QA-7: _cached_base_messages —É–¥–∞–ª—ë–Ω –∫–∞–∫ –º—ë—Ä—Ç–≤—ã–π –∫–æ–¥ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

        # QA-4: –ö—ç—à –º–∞—Ç—Ä–∏—Ü—ã embeddings –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ O(N¬≤) ‚Üí O(N)
        self._published_embeddings_matrix: np.ndarray | None = None
        self._published_embeddings_ids: list[int] | None = None

        self._embedding_model_name = config.get(
            "embeddings.model", "paraphrase-multilingual-MiniLM-L12-v2"
        )
        self._embedding_local_path = config.get("embeddings.local_path")
        self._embedding_allow_remote = config.get("embeddings.allow_remote_download", True)
        self._embedding_enable_fallback = config.get("embeddings.enable_fallback", True)
        self._gemini_model_name = config.get("gemini.model", "gemini-1.5-flash")

        self.global_exclude_keywords = [
            keyword.lower() for keyword in config.get("filters.exclude_keywords", []) if keyword
        ]

        # U4: Backwards compatibility - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –∫–ª—é—á–µ–π (categories –∏ marketplaces)
        raw_marketplaces = config.get("categories") or config.get("marketplaces", [])
        if isinstance(raw_marketplaces, dict):
            raw_marketplaces = [
                {
                    "name": name,
                    **(raw_marketplaces[name] or {}),
                }
                for name in raw_marketplaces
            ]

        self.categories: dict[str, Category] = {}
        for mp_cfg in raw_marketplaces:
            if not isinstance(mp_cfg, dict):
                continue
            data = dict(mp_cfg)
            data.setdefault("enabled", True)
            try:
                category = Category(**data)
            except TypeError as exc:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {mp_cfg}: {exc}")
                continue
            category.combined_exclude_keywords_lower = list(
                dict.fromkeys(category.exclude_keywords_lower + self.global_exclude_keywords)
            )
            self.categories[category.name] = category

        if not self.categories:
            logger.warning("–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        self.all_exclude_keywords_lower = set(self.global_exclude_keywords)
        for category in self.categories.values():
            self.all_exclude_keywords_lower.update(category.combined_exclude_keywords_lower)

        self.category_names = list(self.categories.keys())

        default_channel = next(
            (mp.target_channel for mp in self.categories.values() if mp.target_channel),
            None,
        )

        self.all_digest_enabled = config.get("channels.all_digest.enabled", True)
        self.all_digest_channel = config.get(
            "channels.all_digest.target_channel",
            default_channel,
        )
        counts_config = config.get("channels.all_digest.category_counts", {})
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–µ —Ç–æ–ª—å–∫–æ marketplace-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
        self.all_digest_counts = dict(counts_config) if counts_config else {}

        self.publication_header_template = config.get(
            "publication.header_template",
            "üì∞ –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ {date}",
        )
        self.publication_footer_template = config.get("publication.footer_template", "")
        self.publication_preview_channel = config.get("publication.preview_channel")
        self.publication_notify_account = config.get("publication.notify_account")

        self.duplicate_threshold = config.get("processor.duplicate_threshold", 0.85)
        self.processor_top_n = config.get("processor.top_n", 10)
        self.processor_exclude_count = config.get("processor.exclude_count", 5)
        if not isinstance(self.processor_top_n, int) or self.processor_top_n <= 0:
            logger.warning(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ processor.top_n=%s, –∏—Å–ø–æ–ª—å–∑—É–µ–º 10",
                self.processor_top_n,
            )
            self.processor_top_n = 10
        if not isinstance(self.processor_exclude_count, int) or self.processor_exclude_count < 0:
            logger.warning(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ processor.exclude_count=%s, –∏—Å–ø–æ–ª—å–∑—É–µ–º 5",
                self.processor_exclude_count,
            )
            self.processor_exclude_count = 5
        self.moderation_enabled = config.get("moderation.enabled", True)
        self.moderation_timeout_hours = config.get("moderation.timeout_hours", 2)

    @property
    def embeddings(self) -> EmbeddingService:
        if self._embedding_service is None:
            self._embedding_service = EmbeddingService(
                model_name=self._embedding_model_name,
                local_path=self._embedding_local_path,
                allow_remote_download=self._embedding_allow_remote,
                enable_fallback=self._embedding_enable_fallback,
            )
        return self._embedding_service

    @property
    def gemini(self) -> GeminiClient:
        if self._gemini_client is None:
            self._gemini_client = GeminiClient(
                api_key=self.config.gemini_api_key,
                model_name=self._gemini_model_name,
                prompt_loader=self.config.load_prompt,
            )
        return self._gemini_client

    async def process_category(
        self, marketplace: str, client: TelegramClient, base_messages: list[dict] | None = None
    ):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Args:
            marketplace: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è backwards compatibility)
            client: Telegram client
            base_messages: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CR-H1). –ï—Å–ª–∏ None - –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ë–î
        """

        if marketplace not in self.categories:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {marketplace}")
            return

        mp_config = self.categories.get(marketplace)
        if mp_config is None:
            logger.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {marketplace} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        if not mp_config.enabled:
            logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {marketplace} –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return

        logger.info("=" * 80)
        logger.info(f"üì∞ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò: {marketplace.upper()}")
        logger.info("=" * 80)

        # –®–ê–ì 1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î)
        if base_messages is None:
            # Sprint 6.3: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ë–î
            base_messages = await asyncio.to_thread(self.db.get_unprocessed_messages, hours=24)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(base_messages)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î")
        else:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º {len(base_messages)} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (CR-H1)")

        if not base_messages:
            logger.info(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {marketplace}")
            return

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        all_rejected = {}

        # –®–ê–ì 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        filtered_messages, rejected_by_keywords = self._filter_by_keywords(
            base_messages, mp_config.keywords_lower, mp_config.combined_exclude_keywords_lower
        )
        all_rejected.update(rejected_by_keywords)
        logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        if not filtered_messages:
            # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–∫ processed
            # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
            updates = [
                {'message_id': msg_id, 'rejection_reason': reason}
                for msg_id, reason in all_rejected.items()
            ]
            await asyncio.to_thread(self.db.mark_as_processed_batch, updates)
            logger.info(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ {marketplace} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return

        # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        unique_messages, rejected_duplicates = await self.filter_duplicates(filtered_messages)
        all_rejected.update(rejected_duplicates)
        logger.info(f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(unique_messages)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")

        if not unique_messages:
            # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–∫ processed
            # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
            updates = [
                {
                    'message_id': msg_id,
                    'is_duplicate': (reason == "is_duplicate"),
                    'rejection_reason': reason
                }
                for msg_id, reason in all_rejected.items()
            ]
            await asyncio.to_thread(self.db.mark_as_processed_batch, updates)
            logger.warning("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")
            return

        # –®–ê–ì 4: –û—Ç–±–æ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini (–û–î–ò–ù –ó–ê–ü–†–û–°!)
        # Sprint 6.5: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ LLM –≤—ã–∑–æ–≤—ã
        formatted_posts = await asyncio.to_thread(
            self.gemini.select_and_format_marketplace_news,
            unique_messages,
            marketplace=marketplace,
            top_n=mp_config.top_n,
            marketplace_display_name=mp_config.display_name or marketplace,
        )

        if not formatted_posts:
            # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
            updates = [
                {'message_id': msg["id"], 'rejection_reason': "rejected_by_llm"}
                for msg in unique_messages
            ]
            await asyncio.to_thread(self.db.mark_as_processed_batch, updates)
            logger.warning(f"Gemini –Ω–µ –æ—Ç–æ–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è {marketplace}")
            return

        logger.info(f"Gemini –æ—Ç–æ–±—Ä–∞–ª {len(formatted_posts)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {marketplace}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∫ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ–π
        formatted_posts = sorted(formatted_posts, key=lambda x: x.get("score", 0), reverse=True)

        formatted_ids = {post["source_message_id"] for post in formatted_posts}
        # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
        updates = [
            {'message_id': msg["id"], 'rejection_reason': "rejected_by_llm"}
            for msg in unique_messages
            if msg["id"] not in formatted_ids
        ]
        await asyncio.to_thread(self.db.mark_as_processed_batch, updates)

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
        updates = [
            {'message_id': post["source_message_id"], 'gemini_score': post.get("score")}
            for post in formatted_posts
        ]
        await asyncio.to_thread(self.db.mark_as_processed_batch, updates)

        # –®–ê–ì 5: –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if self.moderation_enabled:
            approved_posts = await self.moderate_posts(client, formatted_posts, marketplace)

            if not approved_posts:
                logger.warning("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
                return
        else:
            approved_posts = formatted_posts

        # –®–ê–ì 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        await self.publish_digest(
            client,
            approved_posts,
            marketplace,
            mp_config.target_channel,
            display_name=mp_config.display_name or marketplace,
        )

        # –®–ê–ì 7: –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ processed
        # (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–º–µ—á–µ–Ω—ã —Ä–∞–Ω–µ–µ)
        # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
        updates = [
            {
                'message_id': msg_id,
                'is_duplicate': (reason == "is_duplicate"),
                'rejection_reason': reason
            }
            for msg_id, reason in all_rejected.items()
        ]
        await asyncio.to_thread(self.db.mark_as_processed_batch, updates)

        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ {marketplace} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def _filter_by_keywords(
        self, messages: list[dict], keywords_lower: list[str], exclude_keywords_lower: list[str]
    ) -> tuple[list[dict], dict[int, str]]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

        Returns:
            Tuple of (filtered_messages, rejected_reasons)
            where rejected_reasons maps message_id -> rejection_reason
        """
        filtered = []
        rejected = {}

        for msg in messages:
            text_lower = msg["text"].lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
            if exclude_keywords_lower and any(
                exclude in text_lower for exclude in exclude_keywords_lower
            ):
                rejected[msg["id"]] = "rejected_by_exclude_keywords"
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
            if keywords_lower and not any(keyword in text_lower for keyword in keywords_lower):
                rejected[msg["id"]] = "rejected_by_keywords_mismatch"
                continue

            filtered.append(msg)

        return filtered, rejected

    async def filter_duplicates(self, messages: list[dict]) -> tuple[list[dict], dict[int, str]]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ embeddings

        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (CR-H1): –∑–∞–≥—Ä—É–∂–∞–µ–º published_embeddings –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ–º
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (CR-C5): –∏—Å–ø–æ–ª—å–∑—É–µ–º batch encoding –≤–º–µ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ encode

        Returns:
            Tuple of (unique_messages, rejected_reasons)
            where rejected_reasons maps message_id -> rejection_reason
        """
        unique = []
        rejected = {}

        if not messages:
            return unique, rejected

        # CR-H1: –ó–∞–≥—Ä—É–∂–∞–µ–º published embeddings –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ–º
        # Sprint 6.3: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ë–î
        if self._cached_published_embeddings is None:
            self._cached_published_embeddings = await asyncio.to_thread(self.db.get_published_embeddings, days=60)
            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._cached_published_embeddings)} published embeddings –≤ –∫—ç—à")

        # QA-4: –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É embeddings –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        # Sprint 6.3.4: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if self._published_embeddings_matrix is None and self._cached_published_embeddings:
            self._published_embeddings_ids = [post_id for post_id, _ in self._cached_published_embeddings]
            self._published_embeddings_matrix = np.array([emb for _, emb in self._cached_published_embeddings])
            logger.debug(
                f"QA-4: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ embeddings {self._published_embeddings_matrix.shape} "
                f"–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"
            )

        # CR-C5: –ë–∞—Ç—á–µ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ä–∞–∑—É (async, non-blocking)
        texts = [msg["text"] for msg in messages]
        embeddings_array = await self.embeddings.encode_batch_async(texts, batch_size=32)
        logger.debug(f"CR-C5: Batch encoded {len(texts)} messages (shape: {embeddings_array.shape})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        for msg, embedding in zip(messages, embeddings_array):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (inline –≤–º–µ—Å—Ç–æ db.check_duplicate)
            # Sprint 6.3.4: —É–¥–∞–ª—ë–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç published_embeddings
            is_duplicate = self._check_duplicate_inline(
                embedding, self.duplicate_threshold
            )

            if is_duplicate:
                rejected[msg["id"]] = "is_duplicate"
                continue

            unique.append(msg)

        return unique, rejected

    def _update_published_cache(self, post_ids: list[int], embeddings: list[np.ndarray]):
        """
        QA-2: –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à published embeddings –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        QA-4: –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É embeddings –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏

        –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ embeddings –≤ –∫—ç—à, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ
        –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ç–æ–º –∂–µ –∑–∞–ø—É—Å–∫–µ –º–æ–≥–ª–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã.

        Args:
            post_ids: –°–ø–∏—Å–æ–∫ source_message_id –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            embeddings: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ embeddings
        """
        if self._cached_published_embeddings is None:
            # –ö—ç—à –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            self._cached_published_embeddings = []
            logger.debug("QA-2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫—ç—à published embeddings")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ embeddings –≤ –∫—ç—à
        new_entries = list(zip(post_ids, embeddings))
        self._cached_published_embeddings.extend(new_entries)

        # QA-4: –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É embeddings –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
        if self._published_embeddings_matrix is not None and len(embeddings) > 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–∞—Ç—Ä–∏—Ü–µ
            new_matrix = np.array(embeddings)
            self._published_embeddings_matrix = np.vstack([self._published_embeddings_matrix, new_matrix])
            self._published_embeddings_ids.extend(post_ids)

            logger.debug(
                f"QA-4: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ embeddings, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {self._published_embeddings_matrix.shape}"
            )

        logger.debug(
            f"QA-2: –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_entries)} embeddings –≤ –∫—ç—à. "
            f"–í—Å–µ–≥–æ –≤ –∫—ç—à–µ: {len(self._cached_published_embeddings)}"
        )

    def _check_duplicate_inline(
        self, embedding: np.ndarray, threshold: float = 0.85
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç inline –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CR-H1)
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (CR-C5): –∏—Å–ø–æ–ª—å–∑—É–µ–º batch_cosine_similarity –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (QA-4): –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
        –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ (Sprint 6.3.4): —É–¥–∞–ª—ë–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä published_embeddings

        Args:
            embedding: Embedding –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            threshold: –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏

        Returns:
            True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç
        """
        # QA-4: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
        if self._published_embeddings_matrix is None or len(self._published_embeddings_matrix) == 0:
            return False

        embedding_norm = np.linalg.norm(embedding)
        if embedding_norm == 0:
            logger.warning("–ü–æ–ª—É—á–µ–Ω embedding —Å –Ω—É–ª–µ–≤–æ–π –Ω–æ—Ä–º–æ–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            return False

        # QA-4: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ similarity scores –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
        similarities = self.embeddings.batch_cosine_similarity(embedding, self._published_embeddings_matrix)

        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ö–æ–∂–µ—Å—Ç—å
        if len(similarities) > 0:
            max_similarity = np.max(similarities)
            if max_similarity >= threshold:
                # QA-4: –ù–∞—Ö–æ–¥–∏–º post_id –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ IDs
                max_idx = np.argmax(similarities)
                post_id = self._published_embeddings_ids[max_idx]
                logger.debug(
                    f"–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: post_id={post_id}, similarity={max_similarity:.3f}"
                )
                return True

        return False

    async def moderate_posts(
        self, client: TelegramClient, posts: list[dict], marketplace: str
    ) -> list[dict]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram"""

        logger.info(f"üìã –û—Ç–ø—Ä–∞–≤–∫–∞ {len(posts)} –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ({marketplace})")

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        for idx, post in enumerate(posts, 1):
            post["moderation_id"] = idx

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        message = self._format_moderation_message(posts, marketplace)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º my_personal_account –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        personal_account = self.config.my_personal_account
        await client.send_message(personal_account, message)

        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {personal_account}")

        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã (–∞–≤—Ç–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        return posts

    async def process_all_categories(self, client: TelegramClient):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å 3-–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π (5 WB + 5 Ozon + 5 –û–±—â–∏—Ö = 15)"""

        logger.info("=" * 80)
        logger.info("üì¶ –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–°–¢–ï–ô: –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò (3-–ö–ê–¢–ï–ì–û–†–ò–ô–ù–ê–Ø –°–ò–°–¢–ï–ú–ê)")
        logger.info("=" * 80)

        # Sprint 6.3: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ë–î
        base_messages = await asyncio.to_thread(self.db.get_unprocessed_messages, hours=24)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(base_messages)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        if not base_messages:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        all_rejected = {}

        # –®–ê–ì 2: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∏—Å–∫–ª—é—á–∞—é—â–∏–º —Å–ª–æ–≤–∞–º
        filtered_messages = []
        for msg in base_messages:
            text_lower = msg["text"].lower()
            if self.all_exclude_keywords_lower and any(
                exclude in text_lower for exclude in self.all_exclude_keywords_lower
            ):
                all_rejected[msg["id"]] = "rejected_by_exclude_keywords"
                continue
            filtered_messages.append(msg)

        logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        if not filtered_messages:
            # –ü–æ–º–µ—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–∫ processed
            # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
            updates = [
                {'message_id': msg_id, 'rejection_reason': reason}
                for msg_id, reason in all_rejected.items()
            ]
            await asyncio.to_thread(self.db.mark_as_processed_batch, updates)
            logger.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
            return

        # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        unique_messages, rejected_duplicates = await self.filter_duplicates(filtered_messages)
        all_rejected.update(rejected_duplicates)
        logger.info(f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(unique_messages)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")

        if not unique_messages:
            # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–∫ processed
            # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
            updates = [
                {
                    'message_id': msg_id,
                    'is_duplicate': (reason == "is_duplicate"),
                    'rejection_reason': reason
                }
                for msg_id, reason in all_rejected.items()
            ]
            await asyncio.to_thread(self.db.mark_as_processed_batch, updates)
            logger.warning("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")
            return

        # –®–ê–ì 4: –û—Ç–±–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ Gemini (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞)
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–µ —Ç–æ–ª—å–∫–æ marketplace-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
        # Sprint 6.5: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ LLM –≤—ã–∑–æ–≤—ã
        categories = await asyncio.to_thread(
            self.gemini.select_by_categories,
            unique_messages,
            category_counts=self.all_digest_counts,
        )

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        category_stats = {cat: len(posts) for cat, posts in categories.items()}
        total_count = sum(category_stats.values())

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        stats_str = ", ".join(f"{cat}={count}" for cat, count in category_stats.items())
        logger.info(f"Gemini –æ—Ç–æ–±—Ä–∞–ª: {stats_str}, –í—Å–µ–≥–æ={total_count}")

        selected_ids = {
            post["source_message_id"]
            for posts in categories.values()
            for post in posts
            if post.get("source_message_id")
        }

        if total_count == 0:
            logger.warning("Gemini –Ω–µ –æ—Ç–æ–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
            # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
            updates = [
                {'message_id': msg["id"], 'rejection_reason': "rejected_by_llm"}
                for msg in unique_messages
            ]
            await asyncio.to_thread(self.db.mark_as_processed_batch, updates)
            return

        # –®–ê–ì 5: –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–≤—ã–±–æ—Ä 10 –∏–∑ 15)
        if self.moderation_enabled:
            approved_posts = await self.moderate_categories(client, categories)

            if not approved_posts:
                logger.warning("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
                # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
                updates = [
                    {'message_id': msg_id, 'rejection_reason': "rejected_by_moderator"}
                    for msg_id in selected_ids
                ]
                await asyncio.to_thread(self.db.mark_as_processed_batch, updates)
                return
        else:
            # –ë–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - –±–µ—Ä–µ–º –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
            approved_posts = [post for posts in categories.values() for post in posts]

        approved_ids = {
            post.get("source_message_id")
            for post in approved_posts
            if post.get("source_message_id")
        }

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –æ—Ç–±–æ—Ä Gemini, –Ω–æ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∏—Ç–æ–≥–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
        rejected_after_moderation = selected_ids - approved_ids
        updates = [
            {'message_id': msg_id, 'rejection_reason': "rejected_by_moderator"}
            for msg_id in rejected_after_moderation
        ]
        await asyncio.to_thread(self.db.mark_as_processed_batch, updates)

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ Gemini –Ω–µ –≤—ã–±—Ä–∞–ª –≤–æ–≤—Å–µ
        # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
        unique_ids = {msg["id"] for msg in unique_messages}
        not_selected_ids = unique_ids - selected_ids
        updates = [
            {'message_id': msg_id, 'rejection_reason': "rejected_by_llm"}
            for msg_id in not_selected_ids
        ]
        await asyncio.to_thread(self.db.mark_as_processed_batch, updates)

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
        updates = [
            {'message_id': post["source_message_id"], 'gemini_score': post.get("score")}
            for post in approved_posts
        ]
        await asyncio.to_thread(self.db.mark_as_processed_batch, updates)

        # –®–ê–ì 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
        target_channel = (
            self.all_digest_channel
            if self.all_digest_enabled and self.all_digest_channel
            else next(
                (mp.target_channel for mp in self.categories.values() if mp.target_channel),
                None,
            )
        )
        await self.publish_digest(
            client,
            approved_posts,
            "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            target_channel,
            display_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        )

        # –®–ê–ì 7: –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ processed
        # Sprint 6.4: –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ N –≤—ã–∑–æ–≤–æ–≤
        updates = [
            {
                'message_id': msg_id,
                'is_duplicate': (reason == "is_duplicate"),
                'rejection_reason': reason
            }
            for msg_id, reason in all_rejected.items()
        ]
        await asyncio.to_thread(self.db.mark_as_processed_batch, updates)

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    async def _wait_for_moderation_response_retry(
        self, conv, total_posts: int
    ) -> list[int] | None:
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–ø–æ—Å–ª–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞)

        Args:
            conv: Conversation –æ–±—ä–µ–∫—Ç
            total_posts: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∞
        """
        try:
            response = await conv.get_response(timeout=float('inf'))
            response_text = response.message.strip().lower()

            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {response_text}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
            if response_text in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
                await conv.send_message("‚ùå –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return None

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ"
            if response_text in ["0", "–≤—Å–µ", "all"]:
                await conv.send_message(f"‚úÖ –í—Å–µ {total_posts} –Ω–æ–≤–æ—Å—Ç–µ–π –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
                return []

            # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤
            excluded_ids = []
            parts = response_text.split()

            for part in parts:
                part = part.strip(",.")
                if part.isdigit():
                    num = int(part)
                    if 1 <= num <= total_posts:
                        excluded_ids.append(num)
                    else:
                        logger.warning(f"–ù–æ–º–µ—Ä {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-{total_posts}")

            if not excluded_ids:
                await conv.send_message(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä–∞. "
                    "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 2 3 5 6)"
                )
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                return await self._wait_for_moderation_response_retry(conv, total_posts)

            await conv.send_message(
                f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–æ {len(excluded_ids)} –Ω–æ–≤–æ—Å—Ç–µ–π: {', '.join(map(str, excluded_ids))}\n"
                f"–ë—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {total_posts - len(excluded_ids)} –Ω–æ–≤–æ—Å—Ç–µ–π"
            )
            return excluded_ids

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            return None

    async def _wait_for_moderation_response(
        self, client: TelegramClient, personal_account: str, message: str, total_posts: int
    ) -> list[int] | None:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞)

        Args:
            client: Telegram –∫–ª–∏–µ–Ω—Ç
            personal_account: Username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            total_posts: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∞
        """
        logger.info("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º conversation API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        async with client.conversation(personal_account) as conv:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                await conv.send_message(message)
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {personal_account}")

                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
                timeout_seconds = self.moderation_timeout_hours * 3600
                logger.info(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (timeout: {self.moderation_timeout_hours}—á)")

                response = await conv.get_response(timeout=timeout_seconds)
                response_text = response.message.strip().lower()

                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {response_text}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
                if response_text in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
                    await conv.send_message("‚ùå –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return None

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ"
                if response_text in ["0", "–≤—Å–µ", "all"]:
                    await conv.send_message(f"‚úÖ –í—Å–µ {total_posts} –Ω–æ–≤–æ—Å—Ç–µ–π –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
                    return []

                # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤
                excluded_ids = []
                parts = response_text.split()

                for part in parts:
                    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ç–∏–ø–∞ –∑–∞–ø—è—Ç—ã—Ö
                    part = part.strip(",.")
                    if part.isdigit():
                        num = int(part)
                        if 1 <= num <= total_posts:
                            excluded_ids.append(num)
                        else:
                            logger.warning(f"–ù–æ–º–µ—Ä {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-{total_posts}")

                if not excluded_ids:
                    await conv.send_message(
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä–∞. "
                        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 2 3 5 6)"
                    )
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ message)
                    return await self._wait_for_moderation_response_retry(
                        conv, total_posts
                    )

                await conv.send_message(
                    f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–æ {len(excluded_ids)} –Ω–æ–≤–æ—Å—Ç–µ–π: {', '.join(map(str, excluded_ids))}\n"
                    f"–ë—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {total_posts - len(excluded_ids)} –Ω–æ–≤–æ—Å—Ç–µ–π"
                )
                return excluded_ids

            except asyncio.TimeoutError:
                # Timeout –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
                logger.warning(
                    f"‚è∞ Timeout –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ({self.moderation_timeout_hours}—á) - "
                    f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö {total_posts} –Ω–æ–≤–æ—Å—Ç–µ–π"
                )
                try:
                    await conv.send_message(
                        f"‚è∞ –í—Ä–µ–º—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ ({self.moderation_timeout_hours}—á)\n"
                        f"‚úÖ –í—Å–µ {total_posts} –Ω–æ–≤–æ—Å—Ç–µ–π –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                    )
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                return []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}", exc_info=True)
                return None

    async def moderate_categories(
        self, client: TelegramClient, categories: dict[str, list[dict]]
    ) -> list[dict]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ 5 –∏–∑ 15 –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)"""

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        all_posts = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∫–∞–∂–¥–æ–º—É –ø–æ—Å—Ç—É
        for cat_name, posts in categories.items():
            for post in posts:
                post["category"] = cat_name
                all_posts.append(post)

        total = len(all_posts)
        exclude_goal = max(0, min(self.processor_exclude_count, total))
        logger.info(
            "üìã –û—Ç–ø—Ä–∞–≤–∫–∞ %s –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (–Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å %s)",
            total,
            exclude_goal,
        )

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        for idx, post in enumerate(all_posts, 1):
            post["moderation_id"] = idx

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        message = self._format_categories_moderation_message(categories, exclude_goal)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
        personal_account = self.config.my_personal_account
        excluded_ids = await self._wait_for_moderation_response(
            client, personal_account, message, total
        )

        if excluded_ids is None:
            # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é
            logger.warning("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã - –∏—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        approved_posts = [post for post in all_posts if post["moderation_id"] not in excluded_ids]

        logger.info(
            f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏—Å–∫–ª—é—á–µ–Ω–æ {len(excluded_ids)}, –æ–¥–æ–±—Ä–µ–Ω–æ {len(approved_posts)}"
        )
        return approved_posts

    def _format_categories_moderation_message(
        self, categories: dict[str, list[dict]], exclude_goal: int
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ 3-–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""

        number_emojis = {
            1: "1Ô∏è‚É£",
            2: "2Ô∏è‚É£",
            3: "3Ô∏è‚É£",
            4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£",
            6: "6Ô∏è‚É£",
            7: "7Ô∏è‚É£",
            8: "8Ô∏è‚É£",
            9: "9Ô∏è‚É£",
            10: "üîü",
            11: "1Ô∏è‚É£1Ô∏è‚É£",
            12: "1Ô∏è‚É£2Ô∏è‚É£",
            13: "1Ô∏è‚É£3Ô∏è‚É£",
            14: "1Ô∏è‚É£4Ô∏è‚É£",
            15: "1Ô∏è‚É£5Ô∏è‚É£",
        }

        lines = ["üìã **–ú–û–î–ï–†–ê–¶–ò–Ø: –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò**"]
        if exclude_goal > 0:
            lines.append(
                f"_–ù—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å {exclude_goal} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {sum(len(v) for v in categories.values())}_\n"
            )
        else:
            lines.append("_–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏—Ö –Ω–æ–º–µ—Ä–∞_\n")

        idx = 1

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
        for category_name, posts in categories.items():
            if not posts:
                continue

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—Ä–∞—Å–∏–≤–æ
            display_name = category_name.upper().replace("_", " ")
            lines.append(f"üì¶ **{display_name}**\n")

            for post in posts:
                emoji = number_emojis.get(idx, f"{idx}.")
                lines.append(f"{emoji} **{post['title']}**")
                lines.append(f"_{post['description'][:100]}..._")
                lines.append(f"‚≠ê {post.get('score', 0)}/10\n")
                idx += 1

        lines.append("=" * 50)
        lines.append(f"üìä **–í—Å–µ–≥–æ:** {idx-1} –Ω–æ–≤–æ—Å—Ç–µ–π\n")
        lines.append("**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**")
        if exclude_goal > 0:
            lines.append(
                f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–µ **–ò–°–ö–õ–Æ–ß–ò–¢–¨ –∏–∑ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò** —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ({exclude_goal} —à—Ç.)"
            )
            sample = " ".join(str(i) for i in range(1, min(exclude_goal, 5) + 1))
            lines.append(f"–ù–∞–ø—Ä–∏–º–µ—Ä: `{sample}`\n")
        else:
            lines.append("–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n")
        lines.append("–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å `0` –∏–ª–∏ `–≤—Å–µ` —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")
        lines.append("–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å `–æ—Ç–º–µ–Ω–∞` —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é")

        return "\n".join(lines)

    def _format_moderation_message(self, posts: list[dict], marketplace: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

        number_emojis = {
            1: "1Ô∏è‚É£",
            2: "2Ô∏è‚É£",
            3: "3Ô∏è‚É£",
            4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£",
            6: "6Ô∏è‚É£",
            7: "7Ô∏è‚É£",
            8: "8Ô∏è‚É£",
            9: "9Ô∏è‚É£",
            10: "üîü",
        }

        lines = [f"üìã **–ú–û–î–ï–†–ê–¶–ò–Ø: {marketplace.upper()}**"]
        lines.append("_(–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏)_\n")

        for post in posts:
            idx = post["moderation_id"]
            emoji = number_emojis.get(idx, f"{idx}Ô∏è‚É£")

            lines.append(f"{emoji} **{post['title']}**")
            lines.append(f"_{post['description'][:150]}..._")
            lines.append(f"‚≠ê –û—Ü–µ–Ω–∫–∞: {post.get('score', 0)}/10\n")

        lines.append("=" * 50)
        lines.append(f"üìä **–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {len(posts)}\n")
        lines.append("**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**")
        lines.append("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ –¥–ª—è –£–î–ê–õ–ï–ù–ò–Ø —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        lines.append("–ù–∞–ø—Ä–∏–º–µ—Ä: `1 3 5` - —É–¥–∞–ª–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ 1, 3 –∏ 5\n")
        lines.append("–û—Ç–ø—Ä–∞–≤—å `0` –∏–ª–∏ `–≤—Å–µ` —á—Ç–æ–±—ã –æ–¥–æ–±—Ä–∏—Ç—å –í–°–ï –Ω–æ–≤–æ—Å—Ç–∏")

        return "\n".join(lines)

    @staticmethod
    def _ensure_post_fields(post: dict) -> dict:
        """
        QA-1: Fallback-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –±–µ–∑ title/description

        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –ø–æ—Å—Ç–µ.
        –ï—Å–ª–∏ title –∏–ª–∏ description –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ text.

        Args:
            post: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞

        Returns:
            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ title, description
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if "title" not in post or not post["title"]:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º title –∏–∑ text
            text = post.get("text", "")
            if text:
                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 7 —Å–ª–æ–≤
                lines = text.split("\n", 1)
                first_line = lines[0].strip()
                words = first_line.split()
                post["title"] = " ".join(words[:7]) if len(words) > 7 else first_line
            else:
                post["title"] = "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"

        if "description" not in post or not post["description"]:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º description –∏–∑ text
            text = post.get("text", "")
            if text:
                # –ë–µ—Ä—ë–º –≤—Å—ë –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                lines = text.split("\n", 1)
                if len(lines) > 1:
                    post["description"] = lines[1].strip()[:200]
                else:
                    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –±–µ—Ä—ë–º —Å–æ 2–≥–æ —Å–ª–æ–≤–∞
                    words = text.split()
                    post["description"] = " ".join(words[7:]) if len(words) > 7 else text
            else:
                post["description"] = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        return post

    async def publish_digest(
        self,
        client: TelegramClient,
        posts: list[dict],
        marketplace: str,
        target_channel: str,
        display_name: str | None = None,
    ):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""

        logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è {len(posts)} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {target_channel}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        yesterday = now_msk() - timedelta(days=1)
        date_str = yesterday.strftime("%d-%m-%Y")
        header_name = display_name or marketplace

        context = {
            "date": date_str,
            "display_name": header_name,
            "marketplace": marketplace,
            "channel": target_channel,
            "profile": getattr(self.config, "profile", ""),
        }

        try:
            header_line = self.publication_header_template.format(**context)
        except Exception as exc:  # noqa: BLE001
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ publication.header_template: %s", exc
            )
            header_line = f"üìå –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ {header_name} –∑–∞ {date_str}"

        lines = [header_line.strip() + "\n"]

        number_emojis = {
            1: "1Ô∏è‚É£",
            2: "2Ô∏è‚É£",
            3: "3Ô∏è‚É£",
            4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£",
            6: "6Ô∏è‚É£",
            7: "7Ô∏è‚É£",
            8: "8Ô∏è‚É£",
            9: "9Ô∏è‚É£",
            10: "üîü",
        }

        for idx, post in enumerate(posts, 1):
            # QA-1: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ title/description
            post = self._ensure_post_fields(post)

            emoji = number_emojis.get(idx, f"{idx}Ô∏è‚É£")
            lines.append(f"{emoji} **{post['title']}**\n")
            lines.append(f"{post['description']}\n")

            if post.get("source_link"):
                lines.append(f"{post['source_link']}\n")

        footer = self.publication_footer_template.strip()
        if footer:
            try:
                footer_text = footer.format(**context)
            except Exception as exc:  # noqa: BLE001
                logger.warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ publication.footer_template: %s", exc
                )
                footer_text = footer
            lines.append(footer_text)

        digest = "\n".join(lines)

        preview_channel = (self.publication_preview_channel or "").strip()
        if preview_channel:
            try:
                await client.send_message(preview_channel, digest)
                logger.info("üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ %s", preview_channel)
            except Exception as exc:  # noqa: BLE001
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –≤ %s: %s", preview_channel, exc)

        # –ü—É–±–ª–∏–∫—É–µ–º
        await client.send_message(target_channel, digest)
        logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {target_channel}")

        notify_account = (self.publication_notify_account or "").strip()
        if notify_account:
            try:
                await client.send_message(
                    notify_account,
                    f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –Ω–∞ {context['date']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {target_channel}",
                )
            except Exception as exc:  # noqa: BLE001
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %s: %s", notify_account, exc)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º embeddings (CR-C5: batch encoding)
        texts = [post["text"] for post in posts]
        embeddings_array = await self.embeddings.encode_batch_async(texts, batch_size=32)
        logger.debug(f"CR-C5: Batch encoded {len(texts)} posts for saving")

        post_ids = []
        # Sprint 6.3: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ë–î
        for post, embedding in zip(posts, embeddings_array):
            await asyncio.to_thread(
                self.db.save_published,
                text=post["text"],
                embedding=embedding,
                source_message_id=post["source_message_id"],
                source_channel_id=post["source_channel_id"],
            )
            post_ids.append(post["source_message_id"])

        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(posts)} embeddings –≤ –ë–î")

        # QA-2: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        self._update_published_cache(post_ids, list(embeddings_array))

    async def run(self, use_categories=True):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

        Args:
            use_categories: –ï—Å–ª–∏ True - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é 3-–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É (5+5+5=15, –≤—ã–±–æ—Ä 10)
                           –ï—Å–ª–∏ False - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ)
        """

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_connect –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è FloodWait –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        session_name = self.config.get("telegram.session_name")
        client = TelegramClient(
            session_name, self.config.telegram_api_id, self.config.telegram_api_hash
        )

        await safe_connect(client, session_name)

        try:
            if use_categories:
                # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (WB + Ozon + –û–±—â–∏–µ)
                await self.process_all_categories(client)
            else:
                # –°–¢–ê–†–ê–Ø –°–ò–°–¢–ï–ú–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ

                # CR-H1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                # Sprint 6.3: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ë–î
                base_messages = await asyncio.to_thread(self.db.get_unprocessed_messages, hours=24)
                logger.info(
                    f"üì¶ CR-H1: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(base_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥—É—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è {len(self.category_names)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)"
                )

                for category_name in self.category_names:
                    try:
                        # –ü–µ—Ä–µ–¥–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ base_messages –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î
                        await self.process_category(category_name, client, base_messages=base_messages)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {category_name}: {e}", exc_info=True)
        finally:
            await client.disconnect()
            self.db.close()

    def __del__(self):
        """Cleanup on garbage collection"""
        try:
            self.db.close()
        except Exception:
            pass  # Suppress errors during cleanup
