"""–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API"""

from __future__ import annotations

import json
import re
import threading
import time
import uuid
from typing import Callable, Optional

import google.generativeai as genai
from google.api_core import exceptions as google_exceptions
from pydantic import BaseModel, ConfigDict, Field, ValidationError
from tenacity import (
    before_sleep_log,
    retry,
    retry_if_exception_type,
    stop_after_attempt,
    wait_exponential,
)

from utils.logger import setup_logger


class NewsItem(BaseModel):
    """Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π Gemini."""

    model_config = ConfigDict(extra="ignore")

    id: int
    title: str
    description: str
    score: int = Field(ge=1, le=10)
    reason: str | None = None
    source_link: str | None = None
    source_message_id: int | None = None
    source_channel_id: int | None = None
    text: str | None = None
    marketplace: str | None = None
    category: str | None = None


class CategoryNews(BaseModel):
    """Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤."""

    model_config = ConfigDict(extra="ignore")

    wildberries: list[NewsItem] = Field(default_factory=list)
    ozon: list[NewsItem] = Field(default_factory=list)
    general: list[NewsItem] = Field(default_factory=list)


class DynamicCategoryNews(BaseModel):
    """Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (QA-1)."""

    model_config = ConfigDict(extra="allow")  # –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    def __init__(self, **data):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ —Å–ø–∏—Å–∫–∞ NewsItem."""
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ —Å–ø–∏—Å–æ–∫ NewsItem
        validated_data = {}
        for category_name, items in data.items():
            if isinstance(items, list):
                validated_data[category_name] = [
                    item if isinstance(item, NewsItem) else NewsItem(**item)
                    for item in items
                ]
            else:
                validated_data[category_name] = []
        super().__init__(**validated_data)


logger = setup_logger(__name__)

_GEMINI_LOCK = threading.Lock()


DEFAULT_SELECT_TOP_NEWS_PROMPT = """–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø—Ä–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã (Ozon, Wildberries, –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç, KazanExpress –∏ –¥—Ä.).

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤ –∏ –≤—ã–±–µ—Ä–∏ –¢–û–ü-{top_n} –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü–∞–º.

–ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê (–≤ –ø–æ—Ä—è–¥–∫–µ –≤–∞–∂–Ω–æ—Å—Ç–∏):

–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–æ—Ü–µ–Ω–∫–∞ 9-10):
‚úÖ –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –∫–æ–º–∏—Å—Å–∏–∏, –¥–æ–≥–æ–≤–æ—Ä—ã, —à—Ç—Ä–∞—Ñ—ã –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
‚úÖ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Å–∫–ª–∞–¥: –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞, SLA, –≤–æ–∑–≤—Ä–∞—Ç–æ–≤, –ø—Ä–∏—ë–º–∫–∏, –ø–æ—Å—Ç–∞–≤–æ–∫
‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∑–∞–ø—É—Å–∫–∞
‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã –æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤

–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–æ—Ü–µ–Ω–∫–∞ 7-8):
‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–µ–π—Å—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏
‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞, —Ç—Ä–µ–Ω–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø—Ä–æ—Å–∞
‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å—É–±—Å–∏–¥–∏–∏, –Ω–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è —Å–µ–ª–ª–µ—Ä–æ–≤

–ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–æ—Ü–µ–Ω–∫–∞ 5-6):
‚úÖ –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏
‚úÖ –†–∞–∑–±–æ—Ä—ã —É–¥–∞—á–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ø—Ä–∏—ë–º–æ–≤

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ö–õ–Æ–ß–ò:
‚ùå –†–µ–∫–ª–∞–º—É –ø–ª–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤, –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤, –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞
‚ùå –û–±–µ—â–∞–Ω–∏—è ¬´–±—ã—Å—Ç—Ä—ã—Ö –º–∏–ª–ª–∏–æ–Ω–æ–≤¬ª, –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –±–µ–∑ —Ñ–∞–∫—Ç–æ–≤
‚ùå –ü—Ä–æ–¥–∞–∂—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–µ—Ä—ã–µ —Å—Ö–µ–º—ã, —É—Å–ª—É–≥–∏ –Ω–∞–∫—Ä—É—Ç–∫–∏
‚ùå –ú–µ–º—ã, –æ—Ñ—Ñ—Ç–æ–ø –∏ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ e-commerce

–°–û–û–ë–©–ï–ù–ò–Ø:

{messages_block}

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ —Å –¢–û–ü-{top_n} –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
[
  {{"id": –Ω–æ–º–µ—Ä_ID_–∏–∑_—Å–ø–∏—Å–∫–∞, "score": –æ—Ü–µ–Ω–∫–∞_–æ—Ç_1_–¥–æ_10, "reason": "–∫—Ä–∞—Ç–∫–æ, –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ"}},
  ...
]

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""


DEFAULT_SELECT_AND_FORMAT_NEWS_PROMPT = """–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å-–¥–∞–π–¥–∂–µ—Å—Ç–∞. –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¢–û–ü-{top_n} –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∏—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

–°–û–û–ë–©–ï–ù–ò–Ø:

{messages_block}

–ö–†–ò–¢–ï–†–ò–ò:
–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (9-10) ‚Äî –ø—Ä–∞–≤–∏–ª–∞, –∫–æ–º–∏—Å—Å–∏–∏, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞.
–°–†–ï–î–ù–ò–ô (7-8) ‚Äî –∫–µ–π—Å—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è.
–ù–ò–ó–ö–ò–ô (5-6) ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏.

–ò–°–ö–õ–Æ–ß–ò: —Ä–µ–∫–ª–∞–º—É –∫—É—Ä—Å–æ–≤, –Ω–∞–∫—Ä—É—Ç–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –±–µ–∑ —Ñ–∞–∫—Ç–æ–≤.

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –∏–∑ {top_n} –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏:
[
  {{
    "id": –Ω–æ–º–µ—Ä_ID,
    "score": –æ—Ü–µ–Ω–∫–∞,
    "reason": "–ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ",
    "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —ç–º–æ–¥–∑–∏",
    "description": "2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–∞–º–∏"
  }},
  ...
]

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""


DEFAULT_SELECT_MARKETPLACE_NEWS_PROMPT = """–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ {display_name}.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏ –¢–û–ü-{top_n} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ {display_name}. –°—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–∏ –∏—Ö –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.

–ö–†–ò–¢–ï–†–ò–ò (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–∞–∂–Ω–æ—Å—Ç–∏):

–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (9-10):
‚úÖ –ü—Ä–∞–≤–∏–ª–∞, –∫–æ–º–∏—Å—Å–∏–∏, —à—Ç—Ä–∞—Ñ—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥–∏—Ç {display_name}
‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö, –ª–æ–≥–∏—Å—Ç–∏–∫–µ, –ø–æ—Å—Ç–∞–≤–∫–∞—Ö, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞/—Å–æ–æ–±—â–µ–Ω–∏—è {display_name} –∏–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏

–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (7-8):
‚úÖ –ö–µ–π—Å—ã —Å–µ–ª–ª–µ—Ä–æ–≤ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏–º–µ–Ω–Ω–æ –Ω–∞ {display_name}
‚úÖ –ü–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –±–æ–Ω—É—Å–æ–≤, –ª—å–≥–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ —Å–ø—Ä–æ—Å–∞ –≤–Ω—É—Ç—Ä–∏ –ø–ª–æ—â–∞–¥–∫–∏

–ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (5-6):
‚úÖ –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏
‚úÖ –†–∞–∑–±–æ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫, —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π, –ø–æ–≤—ã—à–∞—é—â–∏—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏—é

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ö–õ–Æ–ß–ò:
‚ùå –†–µ–∫–ª–∞–º—É –ø–ª–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ ¬´—Ä–∞–∑–±–æ–≥–∞—Ç–µ–µ—à—å –∑–∞ –Ω–µ–¥–µ–ª—é¬ª
‚ùå –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –¥—Ä—É–≥–∏–µ –ø–ª–æ—â–∞–¥–∫–∏
‚ùå –û–±—â–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –±–µ–∑ —Ñ–∞–∫—Ç–æ–≤
‚ùå –ü—Ä–æ–¥–∞–∂—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —É—Å–ª—É–≥–∏ –Ω–∞–∫—Ä—É—Ç–∫–∏, —Å–ø–∞–º

–°–û–û–ë–©–ï–ù–ò–Ø:

{messages_block}

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤:
[
  {{"id": –Ω–æ–º–µ—Ä_ID, "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —ç–º–æ–¥–∑–∏", "description": "2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "score": —á–∏—Å–ª–æ, "reason": "–ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ"}},
  ...
]

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""


DEFAULT_SELECT_THREE_CATEGORIES_PROMPT = """–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º. –†–∞–∑–ª–æ–∂–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:

üì¶ WILDBERRIES ({wb_count}) ‚Äî –≤—Å—ë, —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ Wildberries (WB, –í–ë, –≤–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑).
üì¶ OZON ({ozon_count}) ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ Ozon.
üì¶ –û–ë–©–ò–ï ({general_count}) ‚Äî –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, —Ç—Ä–µ–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—Å–µ—Ö.

–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (9-10): –ø—Ä–∞–≤–∏–ª–∞, –∫–æ–º–∏—Å—Å–∏–∏, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞.
–°–†–ï–î–ù–ò–ô (7-8): –∫–µ–π—Å—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏, –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.
–ù–ò–ó–ö–ò–ô (5-6): –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏.

–ò–°–ö–õ–Æ–ß–ò —Ä–µ–∫–ª–∞–º—É –∫—É—Ä—Å–æ–≤, –Ω–∞–∫—Ä—É—Ç–∫–∏, –º–µ–º—ã.

–°–û–û–ë–©–ï–ù–ò–Ø:

{messages_block}

–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç:
{{
  "wildberries": [{{"id": ..., "title": "...", "description": "...", "score": ..., "reason": "..."}}],
  "ozon": [...],
  "general": [...]
}}

–ù–æ–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ó–∞–≥–æ–ª–æ–≤–æ–∫ 5-7 —Å–ª–æ–≤, –æ–ø–∏—Å–∞–Ω–∏–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–∞–º–∏. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON."""


DEFAULT_SELECT_DYNAMIC_CATEGORIES_PROMPT = """–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞. –†–∞–∑–ª–æ–∂–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:

{categories_description}

–ü–†–ê–í–ò–õ–ê –û–¢–ë–û–†–ê:
- –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (9-10): –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–∞–≤–∏–ª–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è, –∑–Ω–∞—á–∏–º—ã–µ —Ü–∏—Ñ—Ä—ã
- –°–†–ï–î–ù–ò–ô (7-8): –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∫–µ–π—Å—ã —Å –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
- –ù–ò–ó–ö–ò–ô (5-6): –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Å–æ–≤–µ—Ç—ã, –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏

–ò–°–ö–õ–Æ–ß–ò: —Ä–µ–∫–ª–∞–º—É, –ø—Ä–æ–º–æ-–ø–æ—Å—Ç—ã, –º–µ–º—ã, off-topic

–°–û–û–ë–©–ï–ù–ò–Ø:

{messages_block}

–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏. –ö–∞–∂–¥–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- id: –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
- title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ 5-7 —Å–ª–æ–≤
- description: –æ–ø–∏—Å–∞–Ω–∏–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–∞–º–∏
- score: –æ—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ 1-10
- reason: –ø–æ—á–µ–º—É –æ—Ç–æ–±—Ä–∞–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–§–æ—Ä–º–∞—Ç JSON:
{{
{json_structure}
}}

–ù–æ–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""


DEFAULT_FORMAT_NEWS_POST_PROMPT = """–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.

–ò–°–•–û–î–ù–ê–Ø –ù–û–í–û–°–¢–¨:
{text}

–°–û–ó–î–ê–ô JSON –° –ü–û–õ–Ø–ú–ò:
{{
  "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —ç–º–æ–¥–∑–∏",
  "description": "2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–∞–º–∏",
  "source_link": "{source_link}"
}}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""


class GeminiClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API"""

    def __init__(
        self,
        api_key: str,
        model_name: str = "gemini-1.5-flash",
        prompt_loader: Optional[Callable[[str], Optional[str]]] = None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏

        Args:
            api_key: API –∫–ª—é—á Google Gemini
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """
        self.api_key = api_key
        self.model_name = model_name
        self._model: genai.GenerativeModel | None = None
        self._prompt_loader = prompt_loader
        self._prompt_cache: dict[str, str] = {}

    def _ensure_model(self) -> genai.GenerativeModel:
        if self._model is not None:
            return self._model

        with _GEMINI_LOCK:
            if self._model is not None:
                return self._model

            genai.configure(api_key=self.api_key)
            model = genai.GenerativeModel(self.model_name)
            logger.info(f"Gemini –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.model_name}")
            self._model = model
            return self._model

    @property
    def model(self) -> genai.GenerativeModel:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏/–∫–æ–¥–æ–º, –æ–∂–∏–¥–∞—é—â–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç model."""
        return self._ensure_model()

    def _get_prompt_template(self, key: str) -> Optional[str]:
        if not self._prompt_loader:
            return None
        if key in self._prompt_cache:
            return self._prompt_cache[key]
        template = self._prompt_loader(key)
        if template:
            self._prompt_cache[key] = template
            return template
        return None

    def _render_prompt(self, key: str, default_template: str, **kwargs) -> str:
        template = self._get_prompt_template(key) or default_template
        try:
            return template.format(**kwargs)
        except KeyError as exc:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ '%s': %s", key, exc)
            return default_template.format(**kwargs)

    @staticmethod
    def _escape_braces(value: str) -> str:
        return value.replace("{", "{{").replace("}", "}}")

    def _build_messages_block(self, messages: list[dict], text_limit: int = 500) -> str:
        parts = []
        for msg in messages:
            text = msg.get("text") or ""
            snippet = text[:text_limit]
            channel = msg.get("channel_username", "unknown")
            parts.append(f"ID: {msg.get('id')}\n–ö–∞–Ω–∞–ª: @{channel}\n–¢–µ–∫—Å—Ç:\n{snippet}")
        block = "\n\n".join(parts)
        return self._escape_braces(block)

    @staticmethod
    def _generate_request_id() -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (CR-C6)

        Returns:
            –ö–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (8 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        return str(uuid.uuid4())[:8]

    @staticmethod
    def _estimate_prompt_tokens(prompt: str) -> int:
        """
        –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ (CR-C6)

        –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏

        Returns:
            –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        """
        return len(prompt) // 4

    def _validate_prompt_size(
        self, prompt: str, max_tokens: int = 30000, method_name: str = "unknown"
    ) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ (CR-C6)

        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30k)
            method_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–µ–º–ª–µ–º, False –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        """
        estimated_tokens = self._estimate_prompt_tokens(prompt)

        if estimated_tokens > max_tokens:
            logger.warning(
                f"[CR-C6] {method_name}: –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! "
                f"Estimated {estimated_tokens} tokens (max {max_tokens}). "
                f"Prompt size: {len(prompt)} chars. Consider using chunking."
            )
            return False

        if estimated_tokens > max_tokens * 0.8:
            logger.info(
                f"[CR-C6] {method_name}: –ü—Ä–æ–º–ø—Ç –±–ª–∏–∑–æ–∫ –∫ –ª–∏–º–∏—Ç—É. "
                f"Estimated {estimated_tokens} tokens (80% of {max_tokens}). "
                f"Prompt size: {len(prompt)} chars."
            )

        return True

    def _log_api_call(
        self,
        method_name: str,
        prompt: str,
        response_text: str,
        duration: float,
        request_id: str | None = None,
    ):
        """
        –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ Gemini API

        Args:
            method_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            prompt: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            response_text: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            duration: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            request_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, CR-C6)
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å request_id –µ—Å–ª–∏ –µ—Å—Ç—å
        prefix = f"[Gemini][{request_id}]" if request_id else "[Gemini]"

        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        logger.info(
            f"{prefix} {method_name}: –ø—Ä–æ–º–ø—Ç {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤, "
            f"–æ—Ç–≤–µ—Ç {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤, –≤—Ä–µ–º—è {duration:.2f}s"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
        max_log_length = 2000
        if len(prompt) <= max_log_length:
            logger.debug(f"{prefix} {method_name} –ü–†–û–ú–ü–¢:\n{prompt}")
        else:
            logger.debug(
                f"{prefix} {method_name} –ü–†–û–ú–ü–¢ (–æ–±—Ä–µ–∑–∞–Ω –¥–æ {max_log_length} —Å–∏–º–≤–æ–ª–æ–≤):\n"
                f"{prompt[:max_log_length]}..."
            )

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
        if len(response_text) <= max_log_length:
            logger.debug(f"{prefix} {method_name} –û–¢–í–ï–¢:\n{response_text}")
        else:
            logger.debug(
                f"{prefix} {method_name} –û–¢–í–ï–¢ (–æ–±—Ä–µ–∑–∞–Ω –¥–æ {max_log_length} —Å–∏–º–≤–æ–ª–æ–≤):\n"
                f"{response_text[:max_log_length]}..."
            )

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((Exception,)),
        reraise=True,
    )
    def select_top_news(self, messages: list[dict], top_n: int = 10) -> list[dict]:
        """
        –û—Ç–æ–±—Ä–∞—Ç—å –¢–û–ü-N —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—è–º–∏ {id, text, channel}
            top_n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–±–æ—Ä–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        """
        if not messages:
            return []

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        messages_block = self._build_messages_block(messages)

        prompt = self._render_prompt(
            "select_top_news",
            DEFAULT_SELECT_TOP_NEWS_PROMPT,
            top_n=top_n,
            messages_block=messages_block,
        )

        try:
            start_time = time.time()
            model = self._ensure_model()
            response = model.generate_content(prompt)
            result_text = response.text.strip()
            duration = time.time() - start_time

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_api_call("select_top_news", prompt, result_text, duration)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–∏–Ω–æ–≥–¥–∞ Gemini –¥–æ–±–∞–≤–ª—è–µ—Ç ```json```)
            if "```json" in result_text:
                result_text = result_text.split("```json")[1].split("```")[0].strip()
            elif "```" in result_text:
                result_text = result_text.split("```")[1].split("```")[0].strip()

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–∫–∏ –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if not result_text.startswith("["):
                import re

                json_match = re.search(r"\[[\s\S]*\]", result_text)
                if json_match:
                    result_text = json_match.group(0)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ Gemini: {result_text}")
                    return []

            selected = json.loads(result_text)
            logger.info(f"Gemini –æ—Ç–æ–±—Ä–∞–ª {len(selected)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(messages)}")
            return selected[:top_n]

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Gemini: {e}")
            logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {result_text}")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Gemini: {e}")
            if isinstance(e, google_exceptions.GoogleAPICallError):
                raise
            return []

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((Exception,)),
        reraise=True,
    )
    def format_news_post(
        self, text: str, channel: str, message_link: str | None = None
    ) -> dict | None:
        """
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            channel: –ö–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫
            message_link: –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        Returns:
            Dict —Å –ø–æ–ª—è–º–∏: title, description, source_link
        """
        effective_link = message_link if message_link else f"https://t.me/{channel}"
        prompt = self._render_prompt(
            "format_news_post",
            DEFAULT_FORMAT_NEWS_POST_PROMPT,
            text=self._escape_braces(text),
            source_link=self._escape_braces(effective_link),
        )

        try:
            start_time = time.time()
            model = self._ensure_model()
            response = model.generate_content(prompt)
            result_text = response.text.strip()
            duration = time.time() - start_time

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_api_call("format_news_post", prompt, result_text, duration)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if "```json" in result_text:
                result_text = result_text.split("```json")[1].split("```")[0].strip()
            elif "```" in result_text:
                result_text = result_text.split("```")[1].split("```")[0].strip()

            formatted = json.loads(result_text)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
            formatted["source_link"] = effective_link

            return formatted

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini: {e}")
            return None

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((Exception,)),
        reraise=True,
    )
    def select_and_format_news(self, messages: list[dict], top_n: int = 10) -> list[dict]:
        """
        –ù–û–í–ê–Ø –°–•–ï–ú–ê: –û—Ç–æ–±—Ä–∞—Ç—å –ò –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–û–ü-N –Ω–æ–≤–æ—Å—Ç–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—è–º–∏ {id, text, channel}
            top_n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–±–æ—Ä–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–ª—è–º–∏:
            {id, title, description, source_link, score, reason}
        """
        if not messages:
            return []

        messages_block = self._build_messages_block(messages)

        prompt = self._render_prompt(
            "select_and_format_news",
            DEFAULT_SELECT_AND_FORMAT_NEWS_PROMPT,
            top_n=top_n,
            messages_block=messages_block,
        )

        try:
            start_time = time.time()
            model = self._ensure_model()
            response = model.generate_content(prompt)
            result_text = response.text.strip()
            duration = time.time() - start_time

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_api_call("select_and_format_news", prompt, result_text, duration)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if "```json" in result_text:
                result_text = result_text.split("```json")[1].split("```")[0].strip()
            elif "```" in result_text:
                result_text = result_text.split("```")[1].split("```")[0].strip()

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–∫–∏
            if not result_text.startswith("["):
                import re

                json_match = re.search(r"\[[\s\S]*\]", result_text)
                if json_match:
                    result_text = json_match.group(0)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ Gemini: {result_text}")
                    return []

            selected = json.loads(result_text)
            try:
                validated_items = [NewsItem(**item) for item in selected]
                selected = [item.model_dump() for item in validated_items]
            except ValidationError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –æ—Ç Gemini: {e}")
                return []

            # –î–æ–±–∞–≤–ª—è–µ–º source_link –∫ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            messages_dict = {msg["id"]: msg for msg in messages}
            for item in selected:
                msg_id = item["id"]
                if msg_id in messages_dict:
                    msg = messages_dict[msg_id]
                    item["source_link"] = (
                        f"https://t.me/{msg['channel_username']}/{msg.get('message_id', '')}"
                    )
                    item["source_message_id"] = msg_id
                    item["source_channel_id"] = msg["channel_id"]
                    item["text"] = msg["text"]  # –î–ª—è embeddings

            logger.info(
                f"Gemini –æ—Ç–æ–±—Ä–∞–ª –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–ª {len(selected)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(messages)}"
            )
            return selected[:top_n]

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Gemini: {e}")
            logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {result_text}")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±–æ—Ä–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Gemini: {e}")
            return []

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((Exception,)),
        reraise=True,
    )
    def is_spam_or_ad(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–ø–∞–º–æ–º –∏–ª–∏ —Ä–µ–∫–ª–∞–º–æ–π

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞
        """
        prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏, –Ω–µ—Å—ë—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏–ª–∏ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–∞/—Å–ø–∞–º.

–¢–ï–ö–°–¢:
{text[:500]}

–°—á–∏—Ç–∞–π —Å–ø–∞–º–æ–º, –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã, –º–µ–Ω—Ç–æ—Ä—ã, –∞–≥–µ–Ω—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏, –Ω–∞–∫—Ä—É—Ç–∫–∏, –ø—Ä–æ–¥–∞–∂–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å–µ–ª–ª–µ—Ä–∞–º.
–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –ø—Ä–∞–≤–∏–ª–∞, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî —ç—Ç–æ –Ω–µ —Å–ø–∞–º.

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–î–ê" (–µ—Å–ª–∏ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞) –∏–ª–∏ "–ù–ï–¢" (–µ—Å–ª–∏ –ø–æ–ª–µ–∑–Ω–æ)."""

        try:
            start_time = time.time()
            model = self._ensure_model()
            response = model.generate_content(prompt)
            answer = response.text.strip().upper()
            duration = time.time() - start_time

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_api_call("is_spam_or_ad", prompt, answer, duration)

            return "–î–ê" in answer

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º: {e}")
            return False

    @staticmethod
    def _chunk_list(items: list, chunk_size: int) -> list[list]:
        """
        –†–∞–∑–±–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (CR-C6)

        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            chunk_size: –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞

        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤
        """
        return [items[i : i + chunk_size] for i in range(0, len(items), chunk_size)]

    def _process_category_chunk(
        self,
        messages: list[dict],
        marketplace: str,
        chunk_top_n: int,
        marketplace_display_name: str,
    ) -> list[dict]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —á–∞–Ω–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (CR-C6 helper)

        Args:
            messages: –ß–∞–Ω–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            marketplace: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            chunk_top_n: –°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–æ–±—Ä–∞—Ç—å –∏–∑ —á–∞–Ω–∫–∞
            marketplace_display_name: Display name –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —á–∞–Ω–∫–∞
        """
        # CR-C6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è request_id –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        request_id = self._generate_request_id()

        messages_block = self._build_messages_block(messages)

        prompt = self._render_prompt(
            "select_and_format_marketplace_news",
            DEFAULT_SELECT_MARKETPLACE_NEWS_PROMPT,
            top_n=chunk_top_n,
            messages_block=messages_block,
            display_name=marketplace_display_name,
            marketplace=marketplace,
        )

        # CR-C6: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
        method_name = f"select_marketplace_news[{marketplace}]"
        self._validate_prompt_size(prompt, max_tokens=30000, method_name=method_name)

        try:
            start_time = time.time()
            model = self._ensure_model()
            response = model.generate_content(prompt)
            result_text = response.text.strip()
            duration = time.time() - start_time

            # CR-C6: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å request_id
            self._log_api_call(method_name, prompt, result_text, duration, request_id)

            # –£–¥–∞–ª—è–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if result_text.startswith("```"):
                result_text = result_text.split("```")[1]
                if result_text.startswith("json"):
                    result_text = result_text[4:]
                result_text = result_text.strip()

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤
            if not result_text.startswith("["):
                json_match = re.search(r"\[[\s\S]*\]", result_text)
                if json_match:
                    result_text = json_match.group(0)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ Gemini: {result_text}")
                    return []

            selected = json.loads(result_text)
            try:
                validated_items = [NewsItem(**item) for item in selected]
                selected = [item.model_dump() for item in validated_items]
            except ValidationError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –æ—Ç Gemini ({marketplace}): {e}")
                return []

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            messages_dict = {msg["id"]: msg for msg in messages}
            for item in selected:
                msg_id = item["id"]
                if msg_id in messages_dict:
                    msg = messages_dict[msg_id]
                    item["source_link"] = (
                        f"https://t.me/{msg['channel_username']}/{msg.get('message_id', '')}"
                    )
                    item["source_message_id"] = msg_id
                    item["source_channel_id"] = msg["channel_id"]
                    item["text"] = msg["text"]
                    item["marketplace"] = marketplace

            logger.debug(f"Chunk: –æ—Ç–æ–±—Ä–∞–Ω–æ {len(selected)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return selected[:chunk_top_n]

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Gemini ({marketplace}): {e}")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {marketplace}: {e}")
            return []

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((Exception,)),
        reraise=True,
    )
    def select_and_format_marketplace_news(
        self,
        messages: list[dict],
        marketplace: str,
        top_n: int = 10,
        marketplace_display_name: str | None = None,
        chunk_size: int = 50,
    ) -> list[dict]:
        """
        –û—Ç–±–æ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ (Ozon, Wildberries)

        –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π chunking (CR-C6): –µ—Å–ª–∏ messages > chunk_size, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏.

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            marketplace: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (ozon –∏–ª–∏ wildberries)
            top_n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–±–æ—Ä–∞
            marketplace_display_name: Display name –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            chunk_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)

        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        if not messages:
            return []

        display_name = marketplace_display_name or marketplace.replace("_", " ").title()

        # CR-C6: Chunking –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(messages) <= chunk_size:
            # –ú–∞–ª—ã–π —Å–ø–∏—Å–æ–∫: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {marketplace} (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å)")
            return self._process_category_chunk(messages, marketplace, top_n, display_name)

        # –ë–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        chunks = self._chunk_list(messages, chunk_size)
        logger.info(
            f"CR-C6: –†–∞–∑–±–∏–≤–∞–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤ –ø–æ {chunk_size} –¥–ª—è {marketplace}"
        )

        all_selected = []
        for i, chunk in enumerate(chunks, 1):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i}/{len(chunks)} ({len(chunk)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
            chunk_results = self._process_category_chunk(chunk, marketplace, top_n, display_name)
            all_selected.extend(chunk_results)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –±–µ—Ä–µ–º top_n
        all_selected.sort(key=lambda x: x.get("score", 0), reverse=True)
        final_results = all_selected[:top_n]

        logger.info(
            f"CR-C6: Gemini –æ—Ç–æ–±—Ä–∞–ª {len(final_results)} —Ç–æ–ø–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {marketplace} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π ({len(chunks)} —á–∞–Ω–∫–æ–≤)"
        )

        return final_results

    def _process_categories_chunk(
        self,
        messages: list[dict],
        wb_count: int,
        ozon_count: int,
        general_count: int,
    ) -> dict[str, list[dict]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —á–∞–Ω–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è 3-–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (CR-C6 helper)

        Args:
            messages: –ß–∞–Ω–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            wb_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ Wildberries
            ozon_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ Ozon
            general_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏ 'wildberries', 'ozon', 'general'
        """
        # CR-C6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è request_id –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        request_id = self._generate_request_id()

        messages_block = self._build_messages_block(messages)

        prompt = self._render_prompt(
            "select_three_categories",
            DEFAULT_SELECT_THREE_CATEGORIES_PROMPT,
            wb_count=wb_count,
            ozon_count=ozon_count,
            general_count=general_count,
            messages_block=messages_block,
        )

        # CR-C6: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
        method_name = "select_three_categories[chunk]"
        self._validate_prompt_size(prompt, max_tokens=30000, method_name=method_name)

        try:
            start_time = time.time()
            model = self._ensure_model()
            response = model.generate_content(prompt)
            result_text = response.text.strip()
            duration = time.time() - start_time

            # CR-C6: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å request_id
            self._log_api_call(method_name, prompt, result_text, duration, request_id)

            # –£–¥–∞–ª—è–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É
            if result_text.startswith("```"):
                result_text = result_text.split("```")[1]
                if result_text.startswith("json"):
                    result_text = result_text[4:]
                result_text = result_text.strip()

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –æ–±—ä–µ–∫—Ç
            if not result_text.startswith("{"):
                json_match = re.search(r"\{[\s\S]*\}", result_text)
                if json_match:
                    result_text = json_match.group(0)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ Gemini: {result_text}")
                    return {"wildberries": [], "ozon": [], "general": []}

            categories = json.loads(result_text)
            try:
                validated_categories = CategoryNews(**categories)
                categories = validated_categories.model_dump()
            except ValidationError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –æ—Ç Gemini (3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, chunk): {e}")
                return {"wildberries": [], "ozon": [], "general": []}

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            messages_dict = {msg["id"]: msg for msg in messages}

            for category_name in ["wildberries", "ozon", "general"]:
                if category_name not in categories:
                    categories[category_name] = []

                for item in categories[category_name]:
                    msg_id = item["id"]
                    if msg_id in messages_dict:
                        msg = messages_dict[msg_id]
                        item["source_link"] = (
                            f"https://t.me/{msg['channel_username']}/{msg.get('message_id', '')}"
                        )
                        item["source_message_id"] = msg_id
                        item["source_channel_id"] = msg["channel_id"]
                        item["text"] = msg["text"]
                        item["category"] = category_name

            wb_len = len(categories.get("wildberries", []))
            ozon_len = len(categories.get("ozon", []))
            gen_len = len(categories.get("general", []))

            logger.debug(
                f"Chunk: –æ—Ç–æ–±—Ä–∞–Ω–æ WB={wb_len}, Ozon={ozon_len}, –û–±—â–∏–µ={gen_len} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
            return categories

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Gemini (3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, chunk): {e}")
            return {"wildberries": [], "ozon": [], "general": []}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π (3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, chunk): {e}")
            return {"wildberries": [], "ozon": [], "general": []}

    def _process_dynamic_categories_chunk(
        self,
        messages: list[dict],
        category_counts: dict[str, int],
    ) -> dict[str, list[dict]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —á–∞–Ω–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (QA-1)

        Args:
            messages: –ß–∞–Ω–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            category_counts: –°–ª–æ–≤–∞—Ä—å {–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}

        Returns:
            Dict —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏–∑ category_counts
        """
        # CR-C6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è request_id –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        request_id = self._generate_request_id()

        messages_block = self._build_messages_block(messages)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        categories_description = []
        json_structure_lines = []

        for idx, (cat_name, count) in enumerate(category_counts.items(), 1):
            emoji = ["üì¶", "üîî", "üìä", "üéÆ", "üé¨", "ü™ô", "ü§ñ", "üíª"][idx % 8]
            categories_description.append(
                f"{emoji} {cat_name.upper()} ({count}) ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat_name}'"
            )
            json_structure_lines.append(
                f'  "{cat_name}": [{{"id": ..., "title": "...", "description": "...", "score": ..., "reason": "..."}}]'
            )

        categories_desc_text = "\n".join(categories_description)
        json_structure_text = ",\n".join(json_structure_lines)

        prompt = self._render_prompt(
            "select_dynamic_categories",
            DEFAULT_SELECT_DYNAMIC_CATEGORIES_PROMPT,
            categories_description=categories_desc_text,
            messages_block=messages_block,
            json_structure=json_structure_text,
        )

        # CR-C6: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
        method_name = "select_dynamic_categories[chunk]"
        self._validate_prompt_size(prompt, max_tokens=30000, method_name=method_name)

        try:
            start_time = time.time()
            model = self._ensure_model()
            response = model.generate_content(prompt)
            result_text = response.text.strip()
            duration = time.time() - start_time

            # CR-C6: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å request_id
            self._log_api_call(method_name, prompt, result_text, duration, request_id)

            # –£–¥–∞–ª—è–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É
            if result_text.startswith("```"):
                result_text = result_text.split("```")[1]
                if result_text.startswith("json"):
                    result_text = result_text[4:]
                result_text = result_text.strip()

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –æ–±—ä–µ–∫—Ç
            if not result_text.startswith("{"):
                json_match = re.search(r"\{[\s\S]*\}", result_text)
                if json_match:
                    result_text = json_match.group(0)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ Gemini: {result_text}")
                    return {cat: [] for cat in category_counts.keys()}

            categories = json.loads(result_text)

            # QA-1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å DynamicCategoryNews
            try:
                validated_categories = DynamicCategoryNews(**categories)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ dict, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                categories = {
                    cat: getattr(validated_categories, cat, [])
                    for cat in category_counts.keys()
                }
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º NewsItem –æ–±—ä–µ–∫—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ dict
                categories = {
                    cat: [item.model_dump() if isinstance(item, NewsItem) else item
                          for item in items]
                    for cat, items in categories.items()
                }
            except ValidationError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –æ—Ç Gemini (dynamic categories, chunk): {e}")
                return {cat: [] for cat in category_counts.keys()}

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            messages_dict = {msg["id"]: msg for msg in messages}

            for category_name in category_counts.keys():
                if category_name not in categories:
                    categories[category_name] = []

                for item in categories[category_name]:
                    msg_id = item["id"]
                    if msg_id in messages_dict:
                        msg = messages_dict[msg_id]
                        item["source_link"] = (
                            f"https://t.me/{msg['channel_username']}/{msg.get('message_id', '')}"
                        )
                        item["source_message_id"] = msg_id
                        item["source_channel_id"] = msg["channel_id"]
                        item["text"] = msg["text"]
                        item["category"] = category_name

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            counts_str = ", ".join([f"{cat}={len(items)}" for cat, items in categories.items()])
            logger.debug(
                f"Chunk: –æ—Ç–æ–±—Ä–∞–Ω–æ {counts_str} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
            return categories

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Gemini (dynamic categories, chunk): {e}")
            return {cat: [] for cat in category_counts.keys()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π (dynamic categories, chunk): {e}")
            return {cat: [] for cat in category_counts.keys()}

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((Exception,)),
        reraise=True,
    )
    def select_by_categories(
        self,
        messages: list[dict],
        category_counts: dict[str, int],
        chunk_size: int = 50,
    ) -> dict[str, list[dict]]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (U1 - —É–Ω–∏–≤–µ—Ä—Å–∞–ª–∏–∑–∞—Ü–∏—è)

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–µ —Ç–æ–ª—å–∫–æ marketplace-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ.
        –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π chunking (CR-C6): –µ—Å–ª–∏ messages > chunk_size, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏.

        Args:
            messages: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            category_counts: –°–ª–æ–≤–∞—Ä—å {–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}, –Ω–∞–ø—Ä–∏–º–µ—Ä:
                {"wildberries": 5, "ozon": 5, "general": 5}
                {"ai": 10, "tech": 10, "crypto": 5}
            chunk_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)

        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏ –∏–∑ category_counts, –∫–∞–∂–¥—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        if not messages:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π dict –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            return {cat: [] for cat in category_counts.keys()}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        # (–¥–ª—è marketplace use case —Å 3 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏)
        if set(category_counts.keys()) == {"wildberries", "ozon", "general"}:
            return self.select_three_categories(
                messages,
                wb_count=category_counts.get("wildberries", 5),
                ozon_count=category_counts.get("ozon", 5),
                general_count=category_counts.get("general", 5),
                chunk_size=chunk_size,
            )

        # QA-1: –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å chunking
        logger.info(
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {list(category_counts.keys())}"
        )

        # CR-C6: Chunking –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(messages) <= chunk_size:
            # –ú–∞–ª—ã–π —Å–ø–∏—Å–æ–∫: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π {list(category_counts.keys())} (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å)"
            )
            all_categories = self._process_dynamic_categories_chunk(messages, category_counts)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ score
            all_news = []
            for category_name, news_list in all_categories.items():
                for news in news_list:
                    news['category'] = category_name
                    all_news.append(news)

            all_news.sort(key=lambda x: x.get("score", 0), reverse=True)
            total_target = sum(category_counts.values())
            top_news = all_news[:total_target]

            final_categories = {cat: [] for cat in category_counts.keys()}
            for news in top_news:
                category = news.get('category')
                if category and category in final_categories:
                    final_categories[category].append(news)

            counts_str = ", ".join([f"{cat}={len(items)}" for cat, items in final_categories.items()])
            logger.info(f"–û—Ç–æ–±—Ä–∞–ª —Ç–æ–ø–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ø–æ score): {counts_str} (—Ç–æ–ø-{total_target})")

            return final_categories

        # –ë–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        chunks = self._chunk_list(messages, chunk_size)
        logger.info(
            f"CR-C6: –†–∞–∑–±–∏–≤–∞–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤ –ø–æ {chunk_size} "
            f"–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π {list(category_counts.keys())}"
        )

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
        all_categories = {cat: [] for cat in category_counts.keys()}

        for i, chunk in enumerate(chunks, 1):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i}/{len(chunks)} ({len(chunk)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
            chunk_results = self._process_dynamic_categories_chunk(chunk, category_counts)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for category_name in category_counts.keys():
                all_categories[category_name].extend(chunk_results.get(category_name, []))

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ score (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç > –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        all_news = []
        for category_name, news_list in all_categories.items():
            for news in news_list:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                news['category'] = category_name
                all_news.append(news)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –ø–æ score –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
        all_news.sort(key=lambda x: x.get("score", 0), reverse=True)

        # –ë–µ—Ä—ë–º —Ç–æ–ø N (—Å—É–º–º–∞ –≤—Å–µ—Ö category_counts)
        total_target = sum(category_counts.values())
        top_news = all_news[:total_target]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞
        final_categories = {cat: [] for cat in category_counts.keys()}
        for news in top_news:
            category = news.get('category')
            if category and category in final_categories:
                final_categories[category].append(news)

        counts_str = ", ".join([f"{cat}={len(items)}" for cat, items in final_categories.items()])
        logger.info(f"CR-C6: Gemini –æ—Ç–æ–±—Ä–∞–ª —Ç–æ–ø–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ø–æ score): {counts_str} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ø-{total_target})")

        return final_categories

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=4, max=10),
        before_sleep=lambda retry_state: logger.warning(
            f"Retry {retry_state.attempt_number}/3 –¥–ª—è select_three_categories "
            f"–ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {retry_state.outcome.exception()}"
        ),
        reraise=True,
    )
    def select_three_categories(
        self,
        messages: list[dict],
        wb_count: int = 5,
        ozon_count: int = 5,
        general_count: int = 5,
        chunk_size: int = 50,
    ) -> dict[str, list[dict]]:
        """
        –û—Ç–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: Wildberries, Ozon, –û–±—â–∏–µ

        DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ select_by_categories() –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è backwards compatibility.

        –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π chunking (CR-C6): –µ—Å–ª–∏ messages > chunk_size, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏.

        Args:
            messages: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            wb_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ Wildberries
            ozon_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ Ozon
            general_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            chunk_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)

        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏ 'wildberries', 'ozon', 'general'
        """
        if not messages:
            return {"wildberries": [], "ozon": [], "general": []}

        # CR-C6: Chunking –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(messages) <= chunk_size:
            # –ú–∞–ª—ã–π —Å–ø–∏—Å–æ–∫: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å)")
            return self._process_categories_chunk(messages, wb_count, ozon_count, general_count)

        # –ë–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        chunks = self._chunk_list(messages, chunk_size)
        logger.info(
            f"CR-C6: –†–∞–∑–±–∏–≤–∞–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤ –ø–æ {chunk_size} –¥–ª—è 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        )

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
        all_categories = {"wildberries": [], "ozon": [], "general": []}

        for i, chunk in enumerate(chunks, 1):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i}/{len(chunks)} ({len(chunk)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
            chunk_results = self._process_categories_chunk(
                chunk, wb_count, ozon_count, general_count
            )

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for category_name in ["wildberries", "ozon", "general"]:
                all_categories[category_name].extend(chunk_results.get(category_name, []))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ score –∏ –±–µ—Ä—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        all_categories["wildberries"].sort(key=lambda x: x.get("score", 0), reverse=True)
        all_categories["ozon"].sort(key=lambda x: x.get("score", 0), reverse=True)
        all_categories["general"].sort(key=lambda x: x.get("score", 0), reverse=True)

        final_categories = {
            "wildberries": all_categories["wildberries"][:wb_count],
            "ozon": all_categories["ozon"][:ozon_count],
            "general": all_categories["general"][:general_count],
        }

        wb_len = len(final_categories["wildberries"])
        ozon_len = len(final_categories["ozon"])
        gen_len = len(final_categories["general"])

        logger.info(
            f"CR-C6: Gemini –æ—Ç–æ–±—Ä–∞–ª —Ç–æ–ø–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: WB={wb_len}, Ozon={ozon_len}, –û–±—â–∏–µ={gen_len} "
            f"–∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π ({len(chunks)} —á–∞–Ω–∫–æ–≤)"
        )

        return final_categories
