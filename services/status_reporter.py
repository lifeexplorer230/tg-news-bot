"""–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ Telegram –≥—Ä—É–ø–ø—É"""

from telethon import TelegramClient

from database.db import Database
from utils.logger import setup_logger
from utils.timezone import get_timezone, now_in_timezone

logger = setup_logger(__name__)


class StatusReporter:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""

    def __init__(self, config, db=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Status Reporter

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            db: Database instance (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.config = config
        self._owns_db = db is None
        self.timezone_name = config.get(
            "status.timezone", config.get("processor.timezone", "Europe/Moscow")
        )
        self.timezone = get_timezone(self.timezone_name)
        self.db = db or Database(config.db_path, **config.database_settings())
        self.status_chat = config.get("status.chat", "Soft Status")
        self.bot_name = config.get("status.bot_name", "Marketplace News Bot")
        self.message_template = config.get("status.message_template", "")

    async def send_status(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            stats = self.db.get_today_stats()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            now = now_in_timezone(self.timezone)
            time_str = now.strftime("%H:%M:%S")
            date_str = now.strftime("%d.%m.%Y")

            context = {
                "bot_name": self.bot_name,
                "date": date_str,
                "time": time_str,
                "timezone": self.timezone_name,
                "messages_today": stats.get("messages_today", 0),
                "processed_today": stats.get("processed_today", 0),
                "published_today": stats.get("published_today", 0),
                "unprocessed": stats.get("unprocessed", 0),
                "active_channels": stats.get("active_channels", 0),
                "total_messages": stats.get("total_messages", 0),
                "total_published": stats.get("total_published", 0),
            }

            template = (self.message_template or "").strip()
            if template:
                try:
                    message = template.format(**context)
                except Exception as exc:  # noqa: BLE001
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ status.message_template: %s", exc)
                    message = self._build_default_message(context)
            else:
                message = self._build_default_message(context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ bot_token –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–µ—Å—Å–∏–π
            bot_token = self.config.get("status.bot_token", "").strip()

            if bot_token:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bot API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
                # –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å listener –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç User API
                client = TelegramClient(
                    "status_bot",  # –ò–º—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –±–æ—Ç–∞
                    self.config.telegram_api_id,
                    self.config.telegram_api_hash,
                )
                await client.start(bot_token=bot_token)
                logger.debug("StatusReporter –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Bot API (–∏–∑–±–µ–≥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–µ—Å—Å–∏–π)")
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º User API —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
                # –í–ù–ò–ú–ê–ù–ò–ï: –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å listener –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω!
                logger.warning(
                    "‚ö†Ô∏è StatusReporter –∏—Å–ø–æ–ª—å–∑—É–µ—Ç User API - –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å listener! "
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–¥–∞—Ç—å status.bot_token –≤ config.yaml"
                )
                status_session = self.config.get("telegram.session_name") + "_status"
                client = TelegramClient(
                    status_session, self.config.telegram_api_id, self.config.telegram_api_hash
                )
                await client.start(phone=self.config.telegram_phone)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(self.status_chat, message)

            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {self.status_chat}")

            await client.disconnect()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)
        finally:
            if self._owns_db:
                self.db.close()

    @staticmethod
    def _build_default_message(context: dict) -> str:
        message = (
            f"ü§ñ **{context['bot_name']} - –°—Ç–∞—Ç—É—Å –Ω–∞ {context['time']}**\n\n"
            f"üìÖ –î–∞—Ç–∞: {context['date']}\n\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
            f"   üì• –°–æ–±—Ä–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {context['messages_today']}\n"
            f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {context['processed_today']}\n"
            f"   üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {context['published_today']}\n"
            f"   ‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {context['unprocessed']}\n\n"
            "üìà **–ö–∞–Ω–∞–ª—ã:**\n"
            f"   üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {context['active_channels']}\n\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        )
        return message


async def run_status_reporter(config, db=None):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞

    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        db: Database instance (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    reporter = StatusReporter(config, db)
    await reporter.send_status()
