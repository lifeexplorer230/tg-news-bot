name: CI
on:
    push:
      branches: [ main, develop ]
    pull_request:
      branches: [ main, develop ]

  jobs:
    lint-and-test:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: ["3.11", "3.12"]

      steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt')  }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with ruff
        run: |
          ruff check . --output-format=github
        continue-on-error: true

      - name: Check code formatting with black
        run: |
          black --check --diff .
        continue-on-error: true

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing

      - name: Check test coverage
        run: |
          coverage report --fail-under=60

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.12'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

    security-check:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for security vulnerabilities in dependencies
        run: |
          safety check --json || true

      - name: Run bandit security linter
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f screen
        continue-on-error: true

    docker-build:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t marketplace-news-bot:test .

      - name: Run smoke test
        run: |
          docker run --rm marketplace-news-bot:test python -c "import database.db; import services.gemini_client; print('âœ… Imports successful')"
