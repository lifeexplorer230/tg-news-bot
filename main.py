#!/usr/bin/env python3
"""
Marketplace News Bot - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Ozon –∏ Wildberries
"""
from __future__ import annotations

import argparse
import asyncio
import contextlib
import logging
import os
import signal
import sys
import threading
import time

import schedule

from database.db import Database
from services.marketplace_processor import MarketplaceProcessor
from services.status_reporter import run_status_reporter
from services.telegram_listener import TelegramListener
from utils.config import Config, load_config
from utils.logger import configure_logging, get_logger

logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è graceful shutdown
running = True
_shutdown_events: list[tuple[asyncio.AbstractEventLoop, asyncio.Event]] = []


def parse_args(argv: list[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Marketplace News Bot")
    parser.add_argument(
        "mode",
        nargs="?",
        choices=["listener", "processor", "all"],
        default="all",
        help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞",
    )
    parser.add_argument(
        "--profile",
        dest="profile",
        help="–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, marketplace –∏–ª–∏ ai)",
    )
    return parser.parse_args(argv)


def register_shutdown_event(
    event: asyncio.Event,
) -> tuple[asyncio.AbstractEventLoop, asyncio.Event]:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç asyncio.Event, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
    loop = asyncio.get_running_loop()
    entry = (loop, event)
    _shutdown_events.append(entry)
    return entry


def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global running
    if not running:
        return
    running = False
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (%s)...", signal.Signals(sig).name)
    for loop, event in list(_shutdown_events):
        loop.call_soon_threadsafe(event.set)
    _shutdown_events.clear()


async def run_listener_mode(config: Config | None = None):
    """–ó–∞–ø—É—Å–∫ listener (—Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã 24/7)"""
    external_config = config is not None
    config = config or load_config()
    if not external_config:
        configure_logging(
            level=config.log_level,
            log_file=config.log_file,
            rotation=config.log_rotation,
            file_format=config.log_format,
            date_format=config.log_date_format,
        )
        logger.setLevel(getattr(logging, config.log_level.upper(), logging.INFO))

    logger.info("=" * 80)
    logger.info("üéß –ó–ê–ü–£–°–ö LISTENER - Marketplace News Bot")
    logger.info("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    db = Database(config.db_path, **config.database_settings())

    listener = TelegramListener(config, db)
    shutdown_event = asyncio.Event()
    token = register_shutdown_event(shutdown_event)

    listener_task = asyncio.create_task(listener.start())
    shutdown_task = asyncio.create_task(shutdown_event.wait())

    try:
        done, _ = await asyncio.wait(
            {listener_task, shutdown_task},
            return_when=asyncio.FIRST_COMPLETED,
        )

        if shutdown_task in done:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ listener –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            await listener.stop()
            if not listener_task.done():
                listener_task.cancel()
                with contextlib.suppress(asyncio.CancelledError):
                    await listener_task
        else:
            shutdown_task.cancel()
            with contextlib.suppress(asyncio.CancelledError):
                await shutdown_task
    finally:
        if token in _shutdown_events:
            _shutdown_events.remove(token)
        with contextlib.suppress(Exception):
            await listener.stop()
        db.close()


async def run_processor_mode(config: Config | None = None):
    """–ó–∞–ø—É—Å–∫ processor (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π)"""
    external_config = config is not None
    config = config or load_config()
    if not external_config:
        configure_logging(
            level=config.log_level,
            log_file=config.log_file,
            rotation=config.log_rotation,
            file_format=config.log_format,
            date_format=config.log_date_format,
        )
        logger.setLevel(getattr(logging, config.log_level.upper(), logging.INFO))

    logger.info("=" * 80)
    logger.info("‚öôÔ∏è  –ó–ê–ü–£–°–ö PROCESSOR - Marketplace News Bot")
    logger.info("=" * 80)

    processor = MarketplaceProcessor(config)
    await processor.run()


def schedule_processor(config):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è processor"""
    schedule_time = config.get("processor.schedule_time", "09:00")
    timezone = config.get("processor.timezone", "Europe/Moscow")

    logger.info(f"‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è processor: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {schedule_time} ({timezone})")

    def run_processor_sync():
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ processor"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ Processor –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
        asyncio.run(run_processor_mode())

    schedule.every().day.at(schedule_time).do(run_processor_sync)


def schedule_status_reporter(config, db):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    if not config.get("status.enabled", False):
        logger.info("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    interval_minutes = config.get("status.interval_minutes", 60)
    chat = config.get("status.chat", "Soft Status")

    logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç –≤ '{chat}'")

    def run_status_sync():
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        logger.info("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
        asyncio.run(run_status_reporter(config, db))

    schedule.every(interval_minutes).minutes.do(run_status_sync)


def run_scheduler():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    global running
    logger.info("üìÖ Scheduler –∑–∞–ø—É—â–µ–Ω")

    while running:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


async def start_listener_with_scheduler(config, db):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å listener —Å –∞–∫—Ç–∏–≤–Ω—ã–º scheduler –≤ —Ñ–æ–Ω–µ"""
    listener = TelegramListener(config, db)
    shutdown_event = asyncio.Event()
    token = register_shutdown_event(shutdown_event)

    listener_task = asyncio.create_task(listener.start())
    shutdown_task = asyncio.create_task(shutdown_event.wait())

    try:
        done, _ = await asyncio.wait(
            {listener_task, shutdown_task},
            return_when=asyncio.FIRST_COMPLETED,
        )

        if shutdown_task in done:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ listener (—Ä–µ–∂–∏–º all) –ø–æ —Å–∏–≥–Ω–∞–ª—É")
            await listener.stop()
            if not listener_task.done():
                listener_task.cancel()
                with contextlib.suppress(asyncio.CancelledError):
                    await listener_task
        else:
            shutdown_task.cancel()
            with contextlib.suppress(asyncio.CancelledError):
                await shutdown_task
    finally:
        if token in _shutdown_events:
            _shutdown_events.remove(token)
        with contextlib.suppress(Exception):
            await listener.stop()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    global running

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    args = parse_args(sys.argv[1:])
    mode = args.mode

    if args.profile:
        os.environ["PROFILE"] = args.profile

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config(profile=args.profile)
    configure_logging(
        level=config.log_level,
        log_file=config.log_file,
        rotation=config.log_rotation,
        file_format=config.log_format,
        date_format=config.log_date_format,
    )
    logger.setLevel(getattr(logging, config.log_level.upper(), logging.INFO))

    logger.info("=" * 80)
    logger.info("üöÄ MARKETPLACE NEWS BOT")
    logger.info("=" * 80)
    db = Database(config.db_path, **config.database_settings())

    try:
        if mode == "listener":
            # –¢–æ–ª—å–∫–æ listener
            logger.info("–†–µ–∂–∏–º: LISTENER")
            asyncio.run(run_listener_mode(config))

        elif mode == "processor":
            # –¢–æ–ª—å–∫–æ processor (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫)
            logger.info("–†–µ–∂–∏–º: PROCESSOR (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫)")
            asyncio.run(run_processor_mode(config))

        elif mode == "all":
            # –û–±–∞ —Ä–µ–∂–∏–º–∞: listener + scheduler –¥–ª—è processor + status reporter
            logger.info("–†–µ–∂–∏–º: ALL (listener + scheduled processor + status reporter)")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_processor(config)
            schedule_status_reporter(config, db)

            # –ó–∞–ø—É—Å–∫–∞–µ–º scheduler –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            scheduler_thread.start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º listener (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            asyncio.run(start_listener_with_scheduler(config, db))

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        running = False
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        db.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
