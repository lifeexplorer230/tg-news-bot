#!/usr/bin/env python3
"""
Marketplace News Bot - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Ozon –∏ Wildberries
"""
import asyncio
import sys
import signal
import time
import schedule
import threading
from utils.config import load_config
from utils.logger import get_logger
from database.db import Database
from services.telegram_listener import TelegramListener
from services.marketplace_processor import MarketplaceProcessor
from services.status_reporter import run_status_reporter

logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è graceful shutdown
running = True


def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global running
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    running = False
    sys.exit(0)


async def run_listener_mode():
    """–ó–∞–ø—É—Å–∫ listener (—Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã 24/7)"""
    config = load_config()

    logger.info("=" * 80)
    logger.info("üéß –ó–ê–ü–£–°–ö LISTENER - Marketplace News Bot")
    logger.info("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    db = Database(config.db_path)

    listener = TelegramListener(config, db)
    await listener.start()


async def run_processor_mode():
    """–ó–∞–ø—É—Å–∫ processor (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π)"""
    config = load_config()

    logger.info("=" * 80)
    logger.info("‚öôÔ∏è  –ó–ê–ü–£–°–ö PROCESSOR - Marketplace News Bot")
    logger.info("=" * 80)

    processor = MarketplaceProcessor(config)
    await processor.run()


def schedule_processor(config, db):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è processor"""
    schedule_time = config.get('processor.schedule_time', '09:00')
    timezone = config.get('processor.timezone', 'Europe/Moscow')

    logger.info(f"‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è processor: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {schedule_time} ({timezone})")

    def run_processor_sync():
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ processor"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ Processor –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
        asyncio.run(run_processor_mode())

    schedule.every().day.at(schedule_time).do(run_processor_sync)


def schedule_status_reporter(config, db):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    if not config.get('status.enabled', False):
        logger.info("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    interval_minutes = config.get('status.interval_minutes', 60)
    chat = config.get('status.chat', 'Soft Status')

    logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç –≤ '{chat}'")

    def run_status_sync():
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        logger.info("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
        asyncio.run(run_status_reporter(config, db))

    schedule.every(interval_minutes).minutes.do(run_status_sync)


def run_scheduler():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    global running
    logger.info("üìÖ Scheduler –∑–∞–ø—É—â–µ–Ω")

    while running:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


async def start_listener_with_scheduler(config, db):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å listener —Å –∞–∫—Ç–∏–≤–Ω—ã–º scheduler –≤ —Ñ–æ–Ω–µ"""
    listener = TelegramListener(config, db)
    await listener.start()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    global running

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    mode = sys.argv[1] if len(sys.argv) > 1 else "all"

    if mode not in ["listener", "processor", "all"]:
        print("Usage: python main.py [listener|processor|all]")
        print("")
        print("Modes:")
        print("  listener  - –°–ª—É—à–∞–µ—Ç Telegram –∫–∞–Ω–∞–ª—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("  processor - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)")
        print("  all       - Listener + scheduled processor + status reporter (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        sys.exit(1)

    logger.info("=" * 80)
    logger.info("üöÄ MARKETPLACE NEWS BOT")
    logger.info("=" * 80)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    db = Database(config.db_path)

    try:
        if mode == "listener":
            # –¢–æ–ª—å–∫–æ listener
            logger.info("–†–µ–∂–∏–º: LISTENER")
            asyncio.run(run_listener_mode())

        elif mode == "processor":
            # –¢–æ–ª—å–∫–æ processor (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫)
            logger.info("–†–µ–∂–∏–º: PROCESSOR (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫)")
            asyncio.run(run_processor_mode())

        elif mode == "all":
            # –û–±–∞ —Ä–µ–∂–∏–º–∞: listener + scheduler –¥–ª—è processor + status reporter
            logger.info("–†–µ–∂–∏–º: ALL (listener + scheduled processor + status reporter)")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_processor(config, db)
            schedule_status_reporter(config, db)

            # –ó–∞–ø—É—Å–∫–∞–µ–º scheduler –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            scheduler_thread.start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º listener (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            asyncio.run(start_listener_with_scheduler(config, db))

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        running = False
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        db.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
