#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è embeddings –∏–∑ pickle –≤ numpy —Ñ–æ—Ä–º–∞—Ç

SECURITY FIX: –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—É—é pickle –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ numpy.save/load

–í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞!
"""
import argparse
import io
import pickle
import sqlite3
import sys
from pathlib import Path

import numpy as np


def migrate_database(db_path: str, dry_run: bool = True):
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç embeddings –∏–∑ pickle –≤ numpy —Ñ–æ—Ä–º–∞—Ç

    Args:
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        dry_run: –ï—Å–ª–∏ True - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    if not Path(db_path).exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False

    print(f"üìÇ –û—Ç–∫—Ä—ã–≤–∞—é –±–∞–∑—É: {db_path}")
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ embeddings –µ—Å—Ç—å
    cursor.execute("SELECT COUNT(*) FROM published WHERE embedding IS NOT NULL")
    total_count = cursor.fetchone()[0]

    if total_count == 0:
        print("‚úÖ –ù–µ—Ç embeddings –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        conn.close()
        return True

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_count} embeddings –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")

    if dry_run:
        print("\nüîç DRY RUN —Ä–µ–∂–∏–º - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å --apply –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏\n")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ embeddings
    cursor.execute("SELECT id, embedding FROM published WHERE embedding IS NOT NULL")
    rows = cursor.fetchall()

    migrated = 0
    errors = 0

    for row_id, embedding_bytes in rows:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ pickle (–û–ü–ê–°–ù–û!)
            embedding = pickle.loads(embedding_bytes)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ numpy array
            if not isinstance(embedding, np.ndarray):
                print(f"‚ö†Ô∏è  ID {row_id}: –Ω–µ numpy array, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —á–µ—Ä–µ–∑ numpy (–ë–ï–ó–û–ü–ê–°–ù–û!)
            buffer = io.BytesIO()
            np.save(buffer, embedding, allow_pickle=False)
            new_embedding_bytes = buffer.getvalue()

            if not dry_run:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                cursor.execute(
                    "UPDATE published SET embedding = ? WHERE id = ?",
                    (new_embedding_bytes, row_id)
                )

            migrated += 1
            if migrated % 100 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {migrated}/{total_count}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ID {row_id}: {e}")
            errors += 1

    if not dry_run:
        conn.commit()
        print(f"\nüíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É")

    conn.close()

    print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    print(f"   - –£—Å–ø–µ—à–Ω–æ: {migrated}")
    print(f"   - –û—à–∏–±–æ–∫: {errors}")

    if dry_run:
        print(f"\n‚ö†Ô∏è  –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"   python scripts/migrate_pickle_to_numpy.py --db {db_path} --apply")

    return errors == 0


def main():
    parser = argparse.ArgumentParser(
        description="–ú–∏–≥—Ä–∞—Ü–∏—è embeddings –∏–∑ pickle –≤ numpy —Ñ–æ—Ä–º–∞—Ç (SECURITY FIX)"
    )
    parser.add_argument(
        "--db",
        required=True,
        help="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: ./data/marketplace_news.db)"
    )
    parser.add_argument(
        "--apply",
        action="store_true",
        help="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ dry-run)"
    )

    args = parser.parse_args()

    print("=" * 70)
    print("üîí SECURITY MIGRATION: pickle ‚Üí numpy")
    print("=" * 70)
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
    print(f"   cp {args.db} {args.db}.backup")
    print()

    if not args.apply:
        print("üîç –ó–∞–ø—É—Å–∫ –≤ DRY-RUN —Ä–µ–∂–∏–º–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
    else:
        print("‚ö° –ó–∞–ø—É—Å–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        response = input("\n‚ùì –í—ã —Å–æ–∑–¥–∞–ª–∏ –±—ç–∫–∞–ø? (yes/no): ")
        if response.lower() != "yes":
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            return 1

    print()

    success = migrate_database(args.db, dry_run=not args.apply)
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
