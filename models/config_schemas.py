"""
Pydantic schemas –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (CR-H4)

–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ–∫—Ü–∏–∏ config.yaml –∏ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ error messages –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö.
"""

from __future__ import annotations

from typing import List

from pydantic import BaseModel, ConfigDict, Field, field_validator, model_validator


class PathsConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ paths"""

    model_config = ConfigDict(extra="forbid")

    data_dir: str = Field(default="./data", description="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö")
    logs_dir: str = Field(default="./logs", description="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤")
    sessions_dir: str = Field(default="./sessions", description="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π")
    snapshots_dir: str = Field(default="./snapshot", description="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
    db_file_pattern: str = Field(
        default="{data_dir}/{profile}.db", description="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–∞–π–ª–∞ –ë–î"
    )
    log_file_pattern: str = Field(
        default="{logs_dir}/{profile}.log", description="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª–∞"
    )
    session_file_pattern: str = Field(
        default="{sessions_dir}/{profile}.session", description="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏"
    )


class DatabaseRetryConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è database.retry"""

    model_config = ConfigDict(extra="forbid")

    max_attempts: int = Field(default=5, ge=1, le=20, description="–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫")
    base_delay_seconds: float = Field(default=0.5, ge=0.1, le=10.0, description="–ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞")
    backoff_multiplier: float = Field(default=1.0, ge=1.0, le=5.0, description="–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏")


class DatabaseConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ database"""

    model_config = ConfigDict(extra="forbid")

    timeout_seconds: float = Field(default=30.0, ge=1.0, le=300.0, description="–¢–∞–π–º–∞—É—Ç –ë–î")
    busy_timeout_ms: int = Field(default=30000, ge=1000, le=60000, description="–¢–∞–π–º–∞—É—Ç busy")
    retry: DatabaseRetryConfig = Field(
        default_factory=DatabaseRetryConfig, description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry"
    )
    path: str | None = Field(default=None, description="–ü—É—Ç—å –∫ –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")


class TelegramConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ telegram"""

    model_config = ConfigDict(extra="forbid")

    session_name: str | None = Field(default=None, description="–ò–º—è —Å–µ—Å—Å–∏–∏")


class PublicationConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ publication"""

    model_config = ConfigDict(extra="forbid")

    channel: str = Field(default="", description="–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    preview_channel: str = Field(default="", description="–ö–∞–Ω–∞–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    header_template: str = Field(
        default="üìå –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–∏—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∑–∞ {date}",
        description="–®–∞–±–ª–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞",
    )
    footer_template: str = Field(
        default="____________________________________\n–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ: {channel}",
        description="–®–∞–±–ª–æ–Ω —Ñ—É—Ç–µ—Ä–∞",
    )
    notify_account: str = Field(default="", description="–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


class LLMConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ llm"""

    model_config = ConfigDict(extra="forbid")

    provider: str = Field(default="gemini", pattern="^(gemini|openai|anthropic)$")


class GeminiPromptsConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è gemini.prompts"""

    model_config = ConfigDict(extra="allow")  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã

    select_top_news: str | None = None
    select_and_format_news: str | None = None
    select_three_categories: str | None = None
    select_and_format_marketplace_news: str | None = None
    format_news_post: str | None = None


class GeminiConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ gemini"""

    model_config = ConfigDict(extra="forbid")

    model: str = Field(default="gemini-2.0-flash-exp", description="–ú–æ–¥–µ–ª—å Gemini")
    max_tokens: int = Field(default=2048, ge=128, le=8192, description="–ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤")
    temperature: float = Field(default=0.7, ge=0.0, le=2.0, description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    prompts: GeminiPromptsConfig = Field(
        default_factory=GeminiPromptsConfig, description="–ü—É—Ç–∏ –∫ –ø—Ä–æ–º–ø—Ç–∞–º"
    )


class ListenerHealthcheckConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è listener.healthcheck"""

    model_config = ConfigDict(extra="forbid")

    heartbeat_path: str = Field(
        default="{logs_dir}/listener.heartbeat", description="–ü—É—Ç—å –∫ heartbeat"
    )
    interval_seconds: int = Field(default=60, ge=10, le=600, description="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏")
    max_age_seconds: int = Field(default=180, ge=30, le=1800, description="–ú–∞–∫—Å –≤–æ–∑—Ä–∞—Å—Ç")


class ListenerConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ listener"""

    model_config = ConfigDict(extra="forbid")

    mode: str = Field(default="subscriptions", pattern="^(subscriptions|manual)$")
    min_message_length: int = Field(default=50, ge=10, le=1000, description="–ú–∏–Ω –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    channel_whitelist: List[str] = Field(default_factory=list, description="Whitelist –∫–∞–Ω–∞–ª–æ–≤")
    channel_blacklist: List[str] = Field(default_factory=list, description="Blacklist –∫–∞–Ω–∞–ª–æ–≤")
    manual_channels: List[str] = Field(default_factory=list, description="–†—É—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
    healthcheck: ListenerHealthcheckConfig = Field(
        default_factory=ListenerHealthcheckConfig, description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ healthcheck"
    )


class FiltersConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ filters"""

    model_config = ConfigDict(extra="forbid")

    exclude_keywords: List[str] = Field(default_factory=list, description="–ò—Å–∫–ª—é—á–∏—Ç—å keywords")


class ProcessorConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ processor"""

    model_config = ConfigDict(extra="forbid")

    schedule_time: str = Field(
        default="09:00", pattern=r"^\d{2}:\d{2}$", description="–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞"
    )
    timezone: str = Field(default="Europe/Moscow", description="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    duplicate_threshold: float = Field(default=0.85, ge=0.5, le=1.0, description="–ü–æ—Ä–æ–≥ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    top_n: int = Field(default=10, ge=1, le=100, description="–¢–æ–ø N –Ω–æ–≤–æ—Å—Ç–µ–π")
    exclude_count: int = Field(default=5, ge=0, le=50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")


class EmbeddingsConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ embeddings"""

    model_config = ConfigDict(extra="forbid")

    model: str = Field(
        default="paraphrase-multilingual-MiniLM-L12-v2", description="–ú–æ–¥–µ–ª—å embeddings"
    )
    local_path: str = Field(
        default="./models/paraphrase-multilingual-MiniLM-L12-v2",
        description="–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å",
    )
    enable_fallback: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å fallback")
    allow_remote_download: bool = Field(default=False, description="–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")


class ModerationMessageConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è moderation.message"""

    model_config = ConfigDict(extra="forbid")

    title_template: str = Field(
        default="üìã **–ú–û–î–ï–†–ê–¶–ò–Ø: {context}**", description="–®–∞–±–ª–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    )
    intro_template: str = Field(
        default="_(–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏)_", description="–®–∞–±–ª–æ–Ω –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è"
    )
    footer_template: str = Field(
        default="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ –¥–ª—è –£–î–ê–õ–ï–ù–ò–Ø —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", description="–®–∞–±–ª–æ–Ω —Ñ—É—Ç–µ—Ä–∞"
    )


class ModerationConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ moderation"""

    model_config = ConfigDict(extra="forbid")

    enabled: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é")
    timeout_hours: int = Field(default=2, ge=1, le=24, description="–¢–∞–π–º–∞—É—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    instructions_template: str = Field(default="default", description="–®–∞–±–ª–æ–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    cancel_keywords: List[str] = Field(
        default_factory=lambda: ["–æ—Ç–º–µ–Ω–∞", "cancel"], description="Keywords –æ—Ç–º–µ–Ω—ã"
    )
    publish_all_keywords: List[str] = Field(
        default_factory=lambda: ["0", "–≤—Å–µ", "all"], description="Keywords –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö"
    )
    message: ModerationMessageConfig = Field(
        default_factory=ModerationMessageConfig, description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )


class CleanupConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ cleanup"""

    model_config = ConfigDict(extra="forbid")

    raw_messages_days: int = Field(default=14, ge=1, le=365, description="–î–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—ã—Ä—ã—Ö")
    published_days: int = Field(default=60, ge=1, le=730, description="–î–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö")
    run_weekly: bool = Field(default=True, description="–ó–∞–ø—É—Å–∫–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")


class StatusConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ status"""

    model_config = ConfigDict(extra="forbid")

    enabled: bool = Field(default=False, description="–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å-—Ä–µ–ø–æ—Ä—Ç—ã")
    chat: str = Field(default="Soft Status", description="–ß–∞—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤")
    bot_name: str = Field(default="Universal Digest Bot", description="–ò–º—è –±–æ—Ç–∞")
    interval_minutes: int = Field(default=60, ge=1, le=1440, description="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏")
    bot_token: str = Field(default="", description="–¢–æ–∫–µ–Ω –±–æ—Ç–∞")
    timezone: str = Field(default="Europe/Moscow", description="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    message_template: str = Field(default="", description="–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è")


class LoggingRotateConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è logging.rotate"""

    model_config = ConfigDict(extra="forbid")

    enabled: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é")
    max_bytes: int = Field(default=10485760, ge=1024, le=104857600, description="–ú–∞–∫—Å –±–∞–π—Ç")
    backup_count: int = Field(default=5, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤")


class LoggingConfig(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ logging"""

    model_config = ConfigDict(extra="forbid")

    level: str = Field(
        default="INFO", pattern="^(DEBUG|INFO|WARNING|ERROR|CRITICAL)$", description="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤"
    )
    format: str = Field(
        default="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        description="–§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤",
    )
    datefmt: str = Field(default="%Y-%m-%d %H:%M:%S", description="–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    file: str = Field(default="{logs_dir}/bot.log", description="–§–∞–π–ª –ª–æ–≥–æ–≤")
    rotate: LoggingRotateConfig = Field(
        default_factory=LoggingRotateConfig, description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏"
    )


class AppConfig(BaseModel):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ö–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (CR-H4)

    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–µ—Å—å config.yaml —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ error messages.
    """

    model_config = ConfigDict(extra="forbid")

    profile: str = Field(default="marketplace", description="–ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    paths: PathsConfig = Field(default_factory=PathsConfig, description="–ü—É—Ç–∏")
    database: DatabaseConfig = Field(default_factory=DatabaseConfig, description="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    telegram: TelegramConfig = Field(default_factory=TelegramConfig, description="Telegram")
    publication: PublicationConfig = Field(
        default_factory=PublicationConfig, description="–ü—É–±–ª–∏–∫–∞—Ü–∏—è"
    )
    llm: LLMConfig = Field(default_factory=LLMConfig, description="LLM")
    gemini: GeminiConfig = Field(default_factory=GeminiConfig, description="Gemini")
    listener: ListenerConfig = Field(default_factory=ListenerConfig, description="Listener")
    filters: FiltersConfig = Field(default_factory=FiltersConfig, description="–§–∏–ª—å—Ç—Ä—ã")
    processor: ProcessorConfig = Field(default_factory=ProcessorConfig, description="Processor")
    embeddings: EmbeddingsConfig = Field(default_factory=EmbeddingsConfig, description="Embeddings")
    moderation: ModerationConfig = Field(default_factory=ModerationConfig, description="–ú–æ–¥–µ—Ä–∞—Ü–∏—è")
    cleanup: CleanupConfig = Field(default_factory=CleanupConfig, description="–û—á–∏—Å—Ç–∫–∞")
    status: StatusConfig = Field(default_factory=StatusConfig, description="–°—Ç–∞—Ç—É—Å")
    logging: LoggingConfig = Field(default_factory=LoggingConfig, description="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")

    @model_validator(mode="after")
    def validate_schedule_time_format(self) -> AppConfig:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ schedule_time"""
        schedule_time = self.processor.schedule_time
        parts = schedule_time.split(":")
        if len(parts) != 2:
            raise ValueError(
                f"processor.schedule_time –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –ø–æ–ª—É—á–µ–Ω: {schedule_time}"
            )

        try:
            hours = int(parts[0])
            minutes = int(parts[1])
        except ValueError:
            raise ValueError(
                f"processor.schedule_time –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–∞, –ø–æ–ª—É—á–µ–Ω: {schedule_time}"
            )

        if not (0 <= hours <= 23):
            raise ValueError(f"processor.schedule_time: —á–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 0-23, –ø–æ–ª—É—á–µ–Ω–æ: {hours}")

        if not (0 <= minutes <= 59):
            raise ValueError(
                f"processor.schedule_time: –º–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 0-59, –ø–æ–ª—É—á–µ–Ω–æ: {minutes}"
            )

        return self


class EnvConfig(BaseModel):
    """
    –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (CR-H4)

    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ error messages.
    """

    model_config = ConfigDict(extra="ignore")

    TELEGRAM_API_ID: int = Field(..., gt=0, description="Telegram API ID")
    TELEGRAM_API_HASH: str = Field(
        ..., min_length=32, max_length=32, description="Telegram API Hash"
    )
    TELEGRAM_PHONE: str = Field(..., pattern=r"^\+?\d{10,15}$", description="Telegram Phone")
    GEMINI_API_KEY: str = Field(..., min_length=20, description="Gemini API Key")
    MY_CHANNEL: str = Field(default="", description="–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    MY_PERSONAL_ACCOUNT: str = Field(default="", description="–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")

    @field_validator("TELEGRAM_API_ID")
    @classmethod
    def validate_api_id(cls, v: int) -> int:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è TELEGRAM_API_ID"""
        if v <= 0:
            raise ValueError(
                "TELEGRAM_API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. "
                "–ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ https://my.telegram.org/apps"
            )
        return v

    @field_validator("TELEGRAM_API_HASH")
    @classmethod
    def validate_api_hash(cls, v: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è TELEGRAM_API_HASH"""
        if len(v) != 32:
            raise ValueError(
                "TELEGRAM_API_HASH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 32 —Å–∏–º–≤–æ–ª–∞. "
                "–ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ https://my.telegram.org/apps"
            )
        return v

    @field_validator("TELEGRAM_PHONE")
    @classmethod
    def validate_phone(cls, v: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è TELEGRAM_PHONE"""
        if not v.startswith("+"):
            raise ValueError(f"TELEGRAM_PHONE –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+', –ø–æ–ª—É—á–µ–Ω–æ: {v}")
        digits = v.replace("+", "")
        if not digits.isdigit():
            raise ValueError(
                f"TELEGRAM_PHONE –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ '+', –ø–æ–ª—É—á–µ–Ω–æ: {v}"
            )
        if not (10 <= len(digits) <= 15):
            raise ValueError(f"TELEGRAM_PHONE –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10-15 —Ü–∏—Ñ—Ä, –ø–æ–ª—É—á–µ–Ω–æ: {len(digits)}")
        return v

    @field_validator("GEMINI_API_KEY")
    @classmethod
    def validate_gemini_key(cls, v: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è GEMINI_API_KEY"""
        if len(v) < 20:
            raise ValueError(
                "GEMINI_API_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤). "
                "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://aistudio.google.com/apikey"
            )
        return v
