"""–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API"""

import asyncio
import logging
from contextlib import suppress
from telethon import TelegramClient
from telethon.errors import FloodWaitError

logger = logging.getLogger(__name__)


async def safe_connect(client: TelegramClient, session_name: str, max_wait: int = 3600) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait.

    Args:
        client: Telegram client
        session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        max_wait: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)

    Returns:
        True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ

    Raises:
        RuntimeError: –ï—Å–ª–∏ FloodWait –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_wait –∏–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞
    """
    try:
        await client.connect()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not await client.is_user_authorized():
            await client.disconnect()
            raise RuntimeError(
                f"Telegram —Å–µ—Å—Å–∏—è '{session_name}' –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. "
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 'python auth.py' –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."
            )

        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—Å–µ—Å—Å–∏—è: {session_name})")
        return True

    except FloodWaitError as e:
        wait_seconds = e.seconds

        if wait_seconds > max_wait:
            logger.error(
                f"‚ùå FloodWait {wait_seconds}s –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è {max_wait}s. "
                "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Å—Ç–µ—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
            with suppress(Exception):
                await client.disconnect()
            raise RuntimeError(
                f"FloodWait {wait_seconds}s —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ."
            ) from e

        logger.warning(
            f"‚è≥ FloodWait {wait_seconds}s –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram. "
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–∂–∏–¥–∞–µ–º {wait_seconds} —Å–µ–∫—É–Ω–¥..."
        )

        # –ñ–¥—ë–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        for remaining in range(wait_seconds, 0, -10):
            if remaining <= 10:
                await asyncio.sleep(remaining)
                break
            logger.info(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait...")
        await client.connect()

        if not await client.is_user_authorized():
            await client.disconnect()
            raise RuntimeError(
                f"Telegram —Å–µ—Å—Å–∏—è '{session_name}' –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ FloodWait."
            )

        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}", exc_info=True)
        with suppress(Exception):
            await client.disconnect()
        raise
